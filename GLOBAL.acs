#include "zcommon.acs"
#library "global"

int timestop=0;
int MaxFrags;
int BossMusic = 0;
int ServerMAX = 32;
// Fade Script (?)
//
Script 999 (int fade)
{
	// Clear all fades
	if(fade==0){
	FadeTo(0,0,0,0.0,0.0);
	}
	
	// Fade to Green (?)
	if(fade==1){
	FadeTo(0,255,0,0.3,0.0);
	}
}



// Various per player scripts
// On level enter/spawn
//
script 997 ENTER
{
// Give Player a unique TID (tag)
Thing_ChangeTID(0,PlayerNumber()+1000);

//Sets the max number of clients for use in scripts later on.
ServerMAX = GetCVAR("sv_MaxClients");
	
Switch(GetPlayerInfo(PlayerNumber(), PLAYERINFO_TEAM))
	{
	Case 0:
	GiveInventory("LightTeamFlag", 1);
	break;
	Case 1:
	GiveInventory("WilyTeamFlag", 1);
	break;
	Case 2:
	GiveInventory("CossackTeamFlag", 1);
	break;
	Case 3:
	GiveInventory("MrXTeamFlag", 1);
	break;
	}

//Spawns an object to spawn other items at (Terminator, Possession etc)
If(ThingCount(0,PlayerNumber()+2000)==0)
	{
	SpawnSpot("PlayerRespawnPoint",ActivatorTID(),PlayerNumber()+2000,0);
	}
	
	// If a timestop is active, freeze the player
	if(timestop>0){
	SetPlayerProperty(0,1,4);
	}

	// If instagib is enabled, give Instagib Blades
	if(GetCvar("instagib")==1){
	TakeInventory("MegaBuster",1);
	GiveInventory("IGMetalBladeWep",1);
	}

	// If player is a bot, enable ledge blocking (Monster Cross Lines) 
	// and give them an inventory item to identify them
	if(PlayerIsBot(PlayerNumber())){
	GiveInventory("MonsterBlock",1);
	GiveInventory("IsBot", 1);
	}
// Here

// Clear the HUD of any effects/messages etc
HudMessage(s:""; HUDMSG_PLAIN,50,CR_UNTRANSLATED,0.0,0.0,0.1);

if(GetCvar("cl_stfullscreenhud")==true){ConsoleCommand("cl_stfullscreenhud false");}

//Syncs Player colors

for(int i=0;i<=ServerMAX-1;i++) //Modified - Set colors for everyone for new players joining
	{
	If(PlayerInGame(i))
		{
		Switch(GetPlayerInfo(i, PLAYERINFO_TEAM))
			{
			Case 0:
			break;
			Case 1:
			Thing_SetTranslation(i+1000, 48);
			break;
			Case 2:
			Thing_SetTranslation(i+1000, 43);
			break;
			Case 3:
			Thing_SetTranslation(i+1000, 47);
			break;
			Case 4:
			SetActivator(i+1000);
			Thing_SetTranslation(i+1000, -1);
			break;
			}
		}
	}
}


// Various per player scritps
// On respawn
//
script 996 RESPAWN
{
// Execute the ENTER script above
ACS_ExecuteAlways(997,0);
ACS_ExecuteAlways(188, 0);
}

// Foce compat_clientssendfullbuttoninfo true (to enable jump cancel)
//
script 995 OPEN
{
// Check if the server has compat_clientssendfullbuttoninfo set to false
if(GetCVar("compat_clientssendfullbuttoninfo")==0)
	{
	ConsoleCommand("compat_clientssendfullbuttoninfo 1");
	}
// Prevent suicides in LMS and Team LMS
if(GetCvar("lastmanstanding")==1 || GetCvar("teamlms"))
	{
	if(GetCvar("sv_disallowsuicide")==0)
		{
		ConsoleCommand("sv_disallowsuicide 1");
		}
	}
}
/*
// Force certain weapons to not function in CTF/LMS/Possession etc such as Time stop
//
script 994 (void)
{
if(PlayerIsBot(PlayerNumber())){
if(CheckInventory("TimeStopperWep")>0){
TakeInventory("TimeStopperWep",1);
GiveInventory("MegaBuster",1);
SetWeapon("MegaBuster");
}

if(CheckInventory("SkullBarrierWep")>0){
TakeInventory("SkullBarrierWep",1);
GiveInventory("MegaBuster",1);
SetWeapon("MegaBuster");
}
if(CheckInventory("JunkShieldWep")>0){
TakeInventory("JunkShieldWep",1);
GiveInventory("MegaBuster",1);
SetWeapon("MegaBuster");
}

if(CheckInventory("PlantBarrierWep")>0){
TakeInventory("PlantBarrierWep",1);
GiveInventory("MegaBuster",1);
SetWeapon("MegaBuster");
}
SetPlayerProperty(0,1,4);
Delay(1);
SetPlayerProperty(0,0,4);
}}
*/

// Player Color (alternate, no sound)
//
script 991 (int weap)
{
ACS_ExecuteAlways(998, 0, weap, 1);
}

// Rotation scripts
//
script 990 (int whichrotate) //Deprecated?
{
	// Top Spin
	if(whichrotate==1){
	SetActorAngle (ActivatorTID(), GetActorAngle (ActivatorTID()) - 0.06);
	}
	// Power Stone
	if(whichrotate==2){
	SetActorAngle (ActivatorTID(), GetActorAngle (ActivatorTID()) - 0.05);
	}
}

script 989 (void) // Empty script woo!
{

}


//Old 988 script for Power Stone TID's was here


// Remove Time Stop on Death (user only)
// (could probably merge a few scripts with this)
script 987 DEATH
{
	// Check if the guy who died stopped time
	if(timestop==PlayerNumber()){
	ACS_Terminate(986,0); // Stop the flashy effects on the HUD for all players
	HudMessageBold(s:""; HUDMSG_PLAIN,50,CR_UNTRANSLATED,0.0,0.0,0.1);
	SetWeapon("MegaBuster");
	Delay(1);
	SetPlayerProperty(1,0,4);
	TakeInventory("PowerTimeFreezer",1);
	TakeInventory("TimeFreezer",1);
	TakeInventory("TimeStopperWep",1);
	timestop=0;
	ACS_Terminate(193,0); //
	}
	
	// Stop the HUD effects
	HudMessageBold(s:""; HUDMSG_PLAIN,50,CR_UNTRANSLATED,0.0,0.0,0.1);
	//ACS_Terminate(986,0);
}

// Time Stopper HUD FX
//
script 986 (void)
{
SetHudSize(256,224,0);
SetFont("FLASHS1");
HudMessageBold(s:"A"; HUDMSG_PLAIN,50,CR_UNTRANSLATED,128.0,112.0,0.0);
Delay(4);
SetFont("FLASHS2");
HudMessageBold(s:"A"; HUDMSG_PLAIN,50,CR_UNTRANSLATED,128.0,112.0,0.0);
Delay(4);
SetFont("FLASHS3");
HudMessageBold(s:"A"; HUDMSG_PLAIN,50,CR_UNTRANSLATED,128.0,112.0,0.0);
Delay(4);
SetFont("FLASHS4");
HudMessageBold(s:"A"; HUDMSG_PLAIN,50,CR_UNTRANSLATED,128.0,112.0,0.0);
Delay(4);
SetFont("FLASHS5");
HudMessageBold(s:"A"; HUDMSG_PLAIN,50,CR_UNTRANSLATED,128.0,112.0,0.0);
Delay(4);
SetFont("FLASHS6");
HudMessageBold(s:"A"; HUDMSG_PLAIN,50,CR_UNTRANSLATED,128.0,112.0,0.0);
Delay(4);
SetFont("FLASHS7");
HudMessageBold(s:"A"; HUDMSG_PLAIN,50,CR_UNTRANSLATED,128.0,112.0,0.0);
Delay(4);
SetFont("FLASHS8");
HudMessageBold(s:"A"; HUDMSG_PLAIN,50,CR_UNTRANSLATED,128.0,112.0,0.0);
Delay(4);
SetFont("FLASHS9");
HudMessageBold(s:"A"; HUDMSG_PLAIN,50,CR_UNTRANSLATED,128.0,112.0,0.0);
Delay(4);
Restart;
}


script 985 (void) // Empty script woo!
{

}

// Very basic Mega Buster check (used for certain items?)
//
script 984 (void)
{
 if((CheckWeapon("MegaBuster")==1)||
 (CheckWeapon("ProtoBuster")==1) ||
 (CheckWeapon("BassBuster")==1) ||
 (CheckWeapon("SuperAdaptorWep")==1) ||
 (CheckWeapon("TimeStopperWep")==1) ||
 (CheckWeapon("ArrowBuster")==1) ||
 (CheckWeapon("LaserBuster")==1) ||
 (CheckWeapon("DuoFist")==1))
 {
 SetResultValue( FALSE );
 terminate;
 }
 SetResultValue( TRUE );
}

// Some extra stuff to help bots
//
script 983 ENTER
{
	if(PlayerIsBot(PlayerNumber())){
		if(timestop==0){
		// Give the bot the special "stair checker" actor
		GiveInventory("CreateBotBuddy",1);
		Delay(1);
		// If CutterFlag is 999, the player is dead, so terminate this script
		if(CheckInventory("CutterFlag")==999){terminate;}
		Restart;
		}
	}
}

// Duplicate of the above for RESPAWN
//
script 982 RESPAWN
{
ACS_ExecuteAlways(983,0);
}

// Set up weapon randomization for LMS/TLMS
//
str RangedWep[19]={
"BlizzardAttackWep",
"SparkShockWep",
"FireStormWep",
"DustCrusherWep",
"ThunderBeamWep",
"GyroAttackWep",
"DiveMissileWep",
"SilverTomahawkWep",
"MagnetMissileWep",
"GeminiLaserWep",
"ThunderBoltWep",
"FreezeCrackerWep",
"NoiseCrushWep",
"GeminiLaserWep",
"SearchSnakeWep",
"IceWaveWep",
"ThunderBoltWep",
"FreezeCrackerWep",
"HomingSniperWep"
};
str RapidWep[8]={
"QuickBoomerangWep",
"IceSlasherWep",
"WaterWaveWep",
"MetalBladeWep",
"ScrewCrusherWep",
"YamatoSpearWep",
"NeedleCannonWep",
"WaterBalloonWep"
};
str CloseWep[19]={
"BubbleLeadWep",
"WindStormWep",
"CrystalEyeWep",
"PowerStoneWep",
"RingBoomerangWep",
"RollingCutterWep",
"ChargeKickWep",
"FlameBlastWep",
"WildCoilWep",
"ShadowBladeWep",
"KnightCrushWep",
"TopSpinWep",
"AirShooterWep",
"SlashClawWep",
"TornadoHoldWep",
"ThunderClawWep",
"FlameSwordWep",
"MegaBallWep",
"OilSliderWep"
};
str PowerWep[11]={
"PharaohShotWep",
"SuperArmWep",
"AtomicFireWep",
"HardKnuckleWep",
"CrashBombWep",
"NapalmBombWep",
"HyperBombWep",
"DangerWrapWep",
"DrillBombWep",
"BalladeCrackerWep",
"FlashBombWep"
};
str ShieldWep[8]={
"StarCrashWep",
"LeafShieldWep",
"MirrorBusterWep",
"PlantBarrierWep",
"SkullbarrierWep",
"JunkShieldWep",
"ScorchWheelWep",
"SakuGarneWep"
};

global int 0:RangedWepRandom;
global int 1:RapidWepRandom;
global int 2:CloseWepRandom;
global int 3:PowerWepRandom;
global int 4:ShieldWepRandom;

// LMS Weapon Randomization
//
script 981 (void)
{

}

// A script to generate random numbers for LMS weapons
//
script 980 OPEN
{
	Delay(1);
	RangedWepRandom = Random(0,18);
	RapidWepRandom = Random(0,7);
	CloseWepRandom = Random(0,18);
	PowerWepRandom = Random(0,10);
	ShieldWepRandom = Random(0,7);
}

// Clientside script that is executed everytime a weapon's NoAmmo state is called.
// All weapons have it but the script is currently unused.
script 979 (void)
{
If(PlayerIsBot(PlayerNumber()))
	{
	if(CheckInventory("TimeStopperWep")>0)
		{
		TakeInventory("TimeStopperWep",1);
		GiveInventory("MegaBuster",1);
		SetWeapon("MegaBuster");
		}
	if(CheckInventory("SkullBarrierWep")>0)
		{
		TakeInventory("SkullBarrierWep",1);
		GiveInventory("MegaBuster",1);
		SetWeapon("MegaBuster");
		}
	if(CheckInventory("PlantBarrierWep")>0)
		{
		TakeInventory("PlantBarrierWep",1);
		GiveInventory("MegaBuster",1);
		SetWeapon("MegaBuster");
		}
	SetPlayerProperty(0,1,4);
	ACS_Execute(992, 0, 255);
	Delay(15);
	SetPlayerProperty(0,0,4);
	}
}

// Forces a bot to select his Mega Buster.
//
script 978 (void)
{
if(PlayerIsBot(PlayerNumber())){
SetWeapon("MegaBuster");
}
}

// Jump Canceling script. Very awkward but it works somewhat!
//
script 977 ENTER
{
int InputButtons; 
int InputOldButtons; 
if(PlayerIsBot(PlayerNumber())){terminate;}

while (GetActorProperty(ActivatorTID(), APROP_HEALTH) > 0)
	{
   InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);
   InputOldButtons = GetPlayerInput(-1, INPUT_OLDBUTTONS);
	if(GetActorVelZ(0)==0.0 || (GetActorZ (0) - GetActorFloorZ (0)==0.0))
		{
		GiveInventory("JumpCancler",1);
		GiveInventory("BoostFlag", 1);
		//print(s:"You're grounded!");
		}
	
	if(GetActorVelZ(0)<0.0)
		{
		TakeInventory("JumpCancler",1);
		//print(s:"You're falling!");
		}
		
	if(CheckInventory("JumpCancler")>0)
		{
		//print(s:"You let go but are already falling!");
		if (InputOldButtons == InputButtons + BT_JUMP )
			{
			TakeInventory("JumpCancler",1);
			//  print(s:"You let go!");
			  ThrustThingZ(0,0,0,0);
			}
		}
	
	if(CheckWeapon("SuperAdaptorWep")==1)
		{
		if(CheckInventory("NoBoost")==0)
			{
			if(CheckInventory("JumpCancler")==0)
				{
				if (InputOldButtons == InputButtons - BT_JUMP && CheckInventory("BoostFlag")==1 && CheckInventory("RushJetCounter")<1)
					{
					GiveInventory("Boosting",1);
					TakeInventory("BoostFlag", 1);
					}
				}
			}
		}
    delay(1);
		
  }
}

// Quick flash script for Flash Stopper/Centaur Flash
//
script 976 (void) clientside
{
FadeTo(255,255,255,1.0,0.0);
Delay(2);
FadeTo(255,255,255,0.0,0.0);
Delay(2);
}

// Return the current game mode. Used for checking if certain items should be available in these modes.
// 0 = Deathmatch
// 1 = Poessesion
// 2 = LMS
// 3 = Duel
// 4 = CTF/team game
script 975 (int checkmode)
{
if(checkmode==0) // Detects game type
	{
	if(GetCvar("deathmatch")==1){SetResultValue(0);}
	if(GetCvar("possession")==1){SetResultValue(1);}
	if(GetCvar("teampossession")==1){SetResultValue(1);}
	if(GetCvar("lastmanstanding")==1){SetResultValue(2);}
	if(GetCvar("teamlms")==1){SetResultValue(2);}
	if(GetCvar("duel")==1){SetResultValue(3);}
	if(GetCvar("ctf")==1){SetResultValue(4);}
	if(GetCvar("oneflagctf")==1){SetResultValue(4);}
	if(GetCvar("teamgame")==1){SetResultValue(4);}
	if(GetCvar("terminator")==1){SetResultValue(5);}
	}
if(checkmode==1) // Detects if gametype is a team game
	{
	if(GetCvar("deathmatch")==1){SetResultValue(0);}
	if(GetCvar("possession")==1){SetResultValue(0);}
	if(GetCvar("teampossession")==1){SetResultValue(1);}
	if(GetCvar("lastmanstanding")==1){SetResultValue(0);}
	if(GetCvar("teamlms")==1){SetResultValue(1);}
	if(GetCvar("duel")==1){SetResultValue(0);}
	if(GetCvar("ctf")==1){SetResultValue(1);}
	if(GetCvar("oneflagctf")==1){SetResultValue(1);}
	if(GetCvar("teamgame")==1){SetResultValue(1);}
	if(GetCvar("teamplay")==1){SetResultValue(1);}
	if(GetCvar("terminator")==1){SetResultValue(0);}
	}
if(checkmode==2) // Detects modifiers
	{
	int ReturnThis = 0;
	if(GetCvar("instagib")==1){ReturnThis=1;}
	if(GetCvar("buckshot")==1){ReturnThis=2;}
	SetResultValue(ReturnThis);
	}
}

// Quickly freeze/unfreeze a bot. Used to force them to keep pressing the fire button
//
script 974 (void) clientside
{
if(PlayerIsBot(PlayerNumber()))
	{
	SetPlayerProperty(0,1,4);
	Delay(5);
	SetPlayerProperty(0,0,4);
	}
}

// Force players to change certain console commands.
// Word of warning for fellow modders: BE NICE WITH CONSOLECOMMAND!
script 973 ENTER clientside
{
// Prevent weapon names showing up on the HUD (because they all end in "wep" and it looks wrong)
ConsoleCommand("cl_showweapnameoncycle false");
}

// Beat Call Script
// Activated on certain maps via sector actions (in pitfalls)
script 205 (void)
{
if(CheckInventory("BeatCallCheck")>0)
	{
	if(CheckInventory("BeatCounter")==0)
		{
		// Remove Rush Jet
		TakeInventory("RushJetCounter",999); //Changed to RushJetCounter from RushCounter - fixed
		// Activate Beat (flying properties etc)
		GiveInventory("BeatActivate",1);
		GiveInventory("BeatCounter",20);
		ThingSound(ActivatorTID(),"item/beat",127);
		}
	}
}

// Gravity altering script for certain maps with water (horrible method)
//
script 204 (int grav)
{
if(grav==0){SetActorProperty(ActivatorTID(), APROP_Gravity, 0.8);}
if(grav==1){SetActorProperty(ActivatorTID(), APROP_Gravity, 0.25);}
}

// Boss music script. Boss music depends on the level's par setting.
// For custom maps, either change the par or make your own music altering script!
// Also this script is activated via the "KilledMe" actor, which is given to the killer when a player dies.
// Might be useful for other things, such as ingame achievements (GVH style)

script 203 (void)
{
int modeofplay = ACS_ExecuteWithResult(975);
int IsTeamGame = ACS_ExecuteWithResult(975,1);
int LevelParTime = GetLevelInfo(LEVELINFO_PAR_TIME);
Bool MoreFrags = False;

Switch(modeofplay)
	{
	Case 0: // DM / TDM
	Case 5: //Terminator too!
	if(GetCVar("fraglimit") <= 5){terminate;}
	If(IsTeamGame==0)
		{
		if(PlayerFrags() <= maxfrags){terminate;}
		maxfrags = PlayerFrags();
		}
	If(IsTeamGame==1)
		{
		If(BlueScore() > maxfrags){maxfrags=BlueScore();MoreFrags=true;}
		If(RedScore() > maxfrags){maxfrags=RedScore();MoreFrags=true;}
		If(GetCvar("sv_maxteams") >=3)
			{
			If(YellowFrags() > maxfrags){maxfrags=YellowFrags();MoreFrags=true;}
			If(PurpleFrags() > maxfrags){maxfrags=PurpleFrags();MoreFrags=true;}
			}
		If(MoreFrags == False){terminate;}
		}
	if(MaxFrags >= GetCVar("fraglimit") - 5 && MaxFrags < GetCVar("fraglimit") && BossMusic==0)
		{
		BossMusic=1;
		BossMusicSelect(LevelParTime, 0);
		}
	if(MaxFrags >= GetCVar("fraglimit")&& BossMusic < 2)
		{
		BossMusic=2;
		BossMusicSelect(LevelParTime, 1);
		}
	break;
	Case 1: //possession
	break;
	Case 2: //LMS / TLMS
	break;
	Case 3: //Duel
	if(GetCVar("fraglimit") <= 1 || PlayerFrags() <= maxfrags){terminate;}
	maxfrags = PlayerFrags();
	if(MaxFrags == GetCVar("fraglimit") - 1 && MaxFrags < GetCVar("fraglimit") && BossMusic==0)
		{
		BossMusic=1;
		BossMusicSelect(LevelParTime, 0);
		}
	if(MaxFrags >= GetCVar("fraglimit") && BossMusic < 2)
		{
		BossMusic=2;
		BossMusicSelect(LevelParTime, 1);
		Delay(35*6);
		SetMusic("*");
		}
	break;
	Case 4: // CTF
	if(GetCVar("pointlimit")<=1){terminate;}
	if((BlueScore() == GetCVar("pointlimit") - 1 || RedScore() == GetCVar("pointlimit") - 1) && BossMusic==0)
		{
		BossMusic=1;
		BossMusicSelect(LevelParTime, 0);
		}
	if(BlueScore() == GetCVar("pointlimit") || RedScore() == GetCVar("pointlimit") && BossMusic < 2)
		{
		BossMusic=2;
		BossMusicSelect(LevelParTime, 1);
		}
	break;
	}
}

Function void BossMusicSelect(int ThePar, int VictoryOnly)
{
Switch(VictoryOnly)
	{
	Case 0:
	if(ThePar==1){SetMusic("MM1BOSS");}
	if(ThePar==2){SetMusic("MM2BOSS");}
	if(ThePar==3){SetMusic("MM3BOSS");}
	if(ThePar==4){SetMusic("MM4BOSS");}
	if(ThePar==5){SetMusic("MM5BOSS");}
	if(ThePar==6){SetMusic("MM6BOSS");}
	if(ThePar==7){SetMusic("MM7BOSS");}
	if(ThePar==8){SetMusic("MM7OBOS");}
	if(ThePar==9){SetMusic("MM8BOSS");}
	if(ThePar==10){SetMusic("MM1PBOSS");}
	if(ThePar==11){SetMusic("DUOMUS");}
	break;
	Case 1:
	if(ThePar==1){SetMusic("MM1VIC");}
	if(ThePar==2){SetMusic("MM2VIC");}
	if(ThePar==3){SetMusic("MM3VIC");}
	if(ThePar==4){SetMusic("MM4VIC");}
	if(ThePar==5){SetMusic("MM4VIC");}
	if(ThePar==6){SetMusic("MM4VIC");}
	if(ThePar==7){SetMusic("MM7VIC");}
	if(ThePar==8){SetMusic("MM7VIC");}
	if(ThePar==9){SetMusic("MM4VIC");}
	if(ThePar==10){SetMusic("MM1VIC");}
	if(ThePar==11){SetMusic("MM4VIC");}
	break;
	}
}
// A Respawn script for check for jump cancelling (akward, might move it later) 
script 201 RESPAWN
{
ACS_ExecuteAlways(977,0);
}

// Check Flame Blast for oil in Flame Man's stage
// (Legacy, needs to be removed eventually)
script 202 (void) 
{
if(CheckActorFloorTexture(0, "FLAMOIL1")){
ACS_Execute(1,0,0);
}
if(CheckActorFloorTexture(0, "FLAMOIL2")){
ACS_Execute(2,0,0);
}
}


global int 0:SecretUnlock[];
global int 1: rushtime;

// Unlock Global Value (Singleplayer)
//
Script 200 (int which)
{
SecretUnlock[which]=1;
}

// Check if a global value has been unlocked
//
script 199 (int which)
{
SetResultValue( SecretUnlock[which] );
}

// Set all global values to zero (locked)
//
Script 198 (void)
{
SecretUnlock[0]=0;
SecretUnlock[1]=0;
SecretUnlock[2]=0;
SecretUnlock[3]=0;
SecretUnlock[4]=0;
SecretUnlock[5]=0;
SecretUnlock[6]=0;
SecretUnlock[7]=0;
SecretUnlock[8]=0;
SecretUnlock[9]=0;
}

// Singleplayer secret weapons
//
Script 197 ENTER
{
	// Checks if the second player is a human. Useful for checking if it is TRUELY an online game.
	if(PlayerIsBot(PlayerNumber())){terminate;}
	
	Delay(1);
	
	// Give secret weapons
	if(SecretUnlock[6]==1){
	GiveInventory("ScrewCrusherWep",1);
	}
	if(SecretUnlock[7]==1){
	GiveInventory("MirrorBusterWep",1);
	}
	if(SecretUnlock[8]==1){
	GiveInventory("BalladeCrackerWep",1);
	}
}

// Duplicate of the above, for when you respawn
//
Script 196 RESPAWN
{
ACS_Execute(197,0);
}

// Used to thrust a bot into the air (?)
//
Script 195 (void)
{
	if(PlayerIsBot(PlayerNumber())){
	ThrustThingZ(0,50,0,1);
	Delay(35);
	}
}

// Force a bot to use the Mega Buster (DUPLICATE???)
//
Script 194 (void)
{
if(PlayerIsBot(PlayerNumber()))
	{
	GiveInventory("MegaBuster",1);
	SetWeapon("MegaBuster");
	}
}

// Needlessly complex failsafe for the Time Stopper
//
Script 193 (void)
{
timestop=PlayerNumber();
//PrintBold(s:"Timestop failsafe started");
Delay(35*30);
//PrintBold(s:"Timestop failsafe Ended");
ACS_Terminate(986,0);
HudMessageBold(s:""; HUDMSG_PLAIN,50,CR_UNTRANSLATED,0.0,0.0,0.1);
Delay(1);
SetPlayerProperty(1,0,4);
TakeInventory("PowerTimeFreezer",1);
TakeInventory("TimeFreezer",1);
TakeInventory("TimeStopperWep",1);
timestop=0;
//PrintBold(s:"Timestop failsafe Sucess!");
}

// Failsafe continued
//
Script 192 (int who) DISCONNECT
{
//PrintBold(s:"Disconnected");
if(timestop==who){
//PrintBold(s:"Found time stopper man");
ACS_Terminate(986,0);
HudMessageBold(s:""; HUDMSG_PLAIN,50,CR_UNTRANSLATED,0.0,0.0,0.1);
SetWeapon("MegaBuster");
Delay(1);
SetPlayerProperty(1,0,4);
//PrintBold(s:"unfroze people");
TakeInventory("PowerTimeFreezer",1);
TakeInventory("TimeFreezer",1);
TakeInventory("TimeStopperWep",1);
timestop=0;
ACS_Terminate(193,0);
}
}

// Scorch Wheel speed adjuster
//
script 191 (int speed)
{
if(speed==1){
SetActorProperty(0,APROP_SPEED,1.45);
}
if(speed==0){
SetActorProperty(0,APROP_SPEED,1.0);
}
}

Script 190 (int ThrustForce)
{
int ActX = GetActorX(0);
int ActY = GetActorY(0);
SetActivatorToTarget(0);
int PlayerX = GetActorX(0);
int PlayerY = GetActorY(0);
If(ActivatorTID() == 0){terminate;}
ThrustThing(VectorAngle(ActX - PlayerX,ActY - PlayerY)>>8,-ThrustForce,1,0);
ThrustThingZ(0, 20, 0 ,0);
}

//Script 189 was here - old possession code for lost item


//Beat Support Script
script 300 (void)
{
Delay(10);
while(CheckInventory("BeatSupportActivated")!=0)
	{
	if(GetPlayerInput(-1,INPUT_BUTTONS) & BT_ATTACK && CheckInventory("BeatSupportFired") == 0 && CheckInventory("BeatSupportRefresh") == 1)
		{
		GiveInventory("BeatSupportFire",1);
		TakeInventory("BeatSupportRefresh",1);
		Delay(5);
		}
	Delay(1);
	}
}

Script 257 (int UseNumber)
{
SetActivatorToTarget(0);
If(UseNumber > 0){SetResultValue(PlayerNumber());terminate;}
SetResultValue(ActivatorTID());
}

//Returns if player is a bot - Useful in decorate
Script 254 (void)
{
If(PlayerIsBot(PlayerNumber()))
	{SetResultValue(1);}
Else
	{SetResultValue(0);}
}

//Sticky lifts / moby
script 253 (int radius, int height)
{
int x = GetActorX(0);
int y = GetActorY(0);
int z;
int i;

int lastX;
int lastY;
int playerX;
int playerY;
int playerZ;
	
Switch(height)
	{
	Case 0:
	while (true)
		{
		lastX = x;
		lastY = y;
		x = GetActorX(0);
		y = GetActorY(0);
		z = GetActorZ(0);
		for(i=0; i<ServerMAX; i++)
			{
			If(PlayerInGame(i))
				{
				playerX = GetActorX(1000+i);
				playerY = GetActorY(1000+i);
				playerZ = GetActorZ(1000+i);
				if (onPlatformXY(x,y,playerX,playerY,radius))
					{
					If(GetActorZ(i+1000) - GetActorFloorZ(i+1000) != 0)
						{
						SetActorPosition(
							1000+i,
							playerX + x - lastX,
							playerY + y - lastY,
							PlayerZ,0
							);
						}
					Else{SetActorPosition(1000+i, x, y, PlayerZ,0);}
					If(z > PlayerZ){GiveActorInventory(i+1000, "MagRise", 1);}
					}
				}
			}
		delay(1);	
		}	
	Default:
	while (true)
		{
		lastX = x;
		lastY = y;
		x = GetActorX(0);
		y = GetActorY(0);
		z = GetActorZ(0);
		for(i=0; i<ServerMAX; i++)
			{
			If(PlayerInGame(i))
				{
				playerZ = GetActorZ(1000+i);
				if (onPlatformZ(z,playerZ,height)) 
					{
					playerX = GetActorX(1000+i);
					playerY = GetActorY(1000+i);
					if (onPlatformXY(x,y,playerX,playerY,radius))
						{
						SetActorPosition(
							1000+i,
							playerX + x - lastX,
							playerY + y - lastY,
							playerZ,
							0);
						}
					}
				}
			}
		delay(1);	
		}	
	}
}

function int onPlatform (int tid1x, int tid1y, int tid1z, int tid2x, int tid2y, int tid2z, int radius, int height)
{
return onPlatformZ(tid1z, tid2z, height) && onPlatformXY(tid1x, tid1y, tid2x, tid2y, radius);
}

function int onPlatformZ (int tid1z, int tid2z, int height)
{
return tid2z==(tid1z+(height<<16));
}


function int onPlatformXY (int tid1x, int tid1y, int tid2x, int tid2y, int radius)
{
int x, y, d;
x = tid1x - tid2x >> 16; // Convert fixed point to integer
y = tid1y - tid2y >> 16;
d = sqrt(x*x + y*y);
return d<=radius;
}

//Prevents bots from standing still and makes them use buster upgrades
str BusterUpgradeTypes[6] = {"BassUpgrade", "ProtoUpgrade", "AdaptorUpgrade", "ArrowBusterUpgrade", "LaserBusterUpgrade", "DuoFistUpgrade"};

Script 252 ENTER
{
int xPos;
int yPos;
str BusterType = BusterUpgradeTypes[random(0,5)];
if(PlayerIsBot(PlayerNumber()))
	{
	xPos = GetActorX(0);
	yPos = GetActorY(0);
	Delay(35);
	if(CheckInventory("MirrorBusterWepBoss")==1 || CheckInventory("ScrewCrusherWepBoss")==1 || CheckInventory("BalladeCrackerWepBoss")==1 || CheckInventory("DarkManBuster")==1){terminate;}
	if(GetActorProperty(ActivatorTID(), APROP_HEALTH) <=0 || CheckInventory("IsDead")==1){terminate;}
	If(CheckInventory(BusterType)==1){UseInventory(BusterType);}
	if(xPos != GetActorX(0) && yPos != GetActorY(0) && (Abs(GetActorVelX(0)) > 0.25 || Abs(GetActorVelY(0)) > 0.25)) {Restart;}
	//PrintBold(s:"turning bot... ");
	SetActorAngle (0, GetActorAngle (0) - 0.5);
	if(BossMusic==2){terminate;}
	GiveInventory("ForceLook",1);
	Restart;
	}

}

Script 251 RESPAWN
{
if(PlayerIsBot(PlayerNumber()))
	{
	ACS_ExecuteAlways(252,0);
	}
}

//Gravity checking script for Oil Slider
Script 250 (void)
{
If(GetActorProperty(0,APROP_Gravity)==0.25)
	{SetResultValue(1);}
else
	{SetResultValue(0);}
}

//Flash Stopper Script
Script 249 (void) 
{
{
int BrightBlindCount;
	//FadeTo(255,255,255,1.0,0.05);
FadeTo(150,150,150,1.0,0.05);
Delay(10);
While(CheckInventory("BrightBlind")>0)
	{
	BrightBlindCount=CheckInventory("BrightBlind");
	if(BrightBlindCount>100){BrightBlindCount=100;}
	FadeTo(150,150,150,FixedDiv(BrightBlindCount,100),0.0);
	TakeInventory("BrightBlind",1);
	Delay(1);
	}
	FadeTo(150,150,150,0.0,0.0);
	}
}

//Thunder Claw peg script
Script 248 (void)
{
int hooktid = ActivatorTID();
if(hooktid==0 || ThingCount(0,hooktid)>1)
	{
	int HookNewTID=random(4800, 4950); 
	if(ThingCount(0,HookNewTID)==0)
		{
		Thing_ChangeTID(0,HookNewTID);
		}
	Delay(1);
	restart;
	}
int hookx = GetActorX(ActivatorTID());
int hooky = GetActorY(ActivatorTID());
int hookz = GetActorZ(ActivatorTID());
int playerx;
int playery;
int thrust;
int zthrust;
int ThrustTimeOut=0;
SetActivatortoTarget(0);
If(CheckInventory("RushJetCounter") >= 5){terminate;}
SetActorState(hooktid,"TargetClear",1);
If(ActivatorTID()==hooktid){terminate;}
playerx=GetActorX(ActivatorTID());
playery=GetActorY(ActivatorTID());
SetPlayerProperty(0,1,0);
TakeInventory("JumpCancler",1);


If(GetActorZ(ActivatorTID()) - GetActorFloorZ(ActivatorTID())<8)
	{
	ThrustThingZ(0,35,0,0);
	Delay(5);
	}
While(GetActorZ(ActivatorTID()) >= (hookz-64.0) && ThrustTimeOut < 105) // If Player is above the hook, force them below it
	{
	ThrustThingZ(0,8,1,1);
	ThrustThing(VectorAngle(hookx - playerx, hooky - playery)>>8,1,1,0);
	playerx=GetActorX(ActivatorTID());
	playery=GetActorY(ActivatorTID());
	ThrustTimeOut++;
	Delay(1);
	}
thrust=xyDistance(hooktid, ActivatorTID())/10;
zthrust=zDistance(hooktid, ActivatorTID())/13;
if(thrust < 10){thrust=10;}
if(thrust > 50){thrust=50;}
ThrustThing(VectorAngle(hookx - playerx, hooky - playery)>>8,thrust,1,0);
ThrustThingZ(0,0,0,0);
ThrustThingZ(0,zthrust,0,1);
Delay(5);
ThrustThingZ(0,10,0,1);
TakeInventory("WireFlag", 1);
Delay(2);
ThrustThingZ(0,14,0,1);
Delay(2);
ThrustThingZ(0,18,0,1);
Delay(2);
ThrustThingZ(0,20,0,1);
Delay(2);
ThrustThingZ(0,22,0,1);
SetPlayerProperty(0,0,0);
}

//Push / Pull Script. Force falls off with distance  Useful for Black Hole bomb etc

script 247 (int VForce, int VDistance)
{
int Target_TID;
int Target_Angle;
int Target_Force;
int Target_Distance;
int FiringPlayer;
if(Vforce == 0 || VDistance == 0){terminate;}

If(ActivatorTID() == 0)
	{
	FiringPlayer= ACS_ExecuteWithResult(257, 0);
	}
else
	{
	FiringPlayer=ActivatorTID();
	}
For(int p = 0;p < ServerMax; p++)
	{
	Target_TID = p+1000;
	If(xyzDistance(0,Target_TID) < VDistance && FiringPlayer!=Target_TID)
		{
		Target_Distance=xyzDistance(0,Target_TID);
		Target_Force=FixedDiv(VForce,sqrt(Target_Distance))/0.75;
		Target_Angle=VectorAngle(GetActorX(0)-GetActorX(Target_TID),GetActorY(0)-GetActorY(Target_TID));
		If(Target_Distance>40 || Target_Force < 0){ThrustThing(Target_Angle>>8,Target_Force,0,Target_TID);}
		}
	}
}


//Script to prevent certian weapons from causing problems in Possession
Script 188 ENTER 
{
Delay(10);
If(ACS_ExecuteWithResult(975)!=1){terminate;}
If(GetActorProperty(0, APROP_HEALTH) <= 0){terminate;}
If(CheckInventory("PowerPossessionArtifact")==1)
	{
	Delay(1);
	SetPlayerProperty(0,0,0);
	SetPlayerProperty(0,0,4);
	SetPlayerProperty(0,0,5);
	ACS_ExecuteAlways(192, 0);
	SetActorProperty(0,APROP_SPEED,1.0);
	GiveInventory("MakeShootable", 1);
	TakeInventory("BasicArmor", 999);
	TakeInventory("PharaohCharge", 999);
	TakeInventory("OilSlideAmmo", 999);
	TakeInventory("OilCheck", 999);
	TakeInventory("WeaponCharge", 999);
	TakeInventory("ShieldCheck", 999);
	terminate;
	}
restart;
}

//Returns absolute value
function int abs (int x)
{
    if (x < 0)
        return -x;

    return x;
}

//sqrt and distance functions from ZDoom wiki
function int sqrt(int number)
{
	if(number <= 3)
	{
		if(number > 0)
		{
			return 1;
		}
		return 0;
	}

	int oldAns = number >> 1,                     // initial guess
	    newAns = (oldAns + number / oldAns) >> 1; // first iteration

	// main iterative method
	while(newAns < oldAns)
	{
		oldAns = newAns;
		newAns = (oldAns + number / oldAns) >> 1;
	}

	return oldAns;
}

function int xyzDistance (int tid1, int tid2)
{
	int x, y, z, d;
	x = GetActorX(tid1) - GetActorX(tid2) >> 16; // Convert fixed point to integer
	y = GetActorY(tid1) - GetActorY(tid2) >> 16;
	z = GetActorZ(tid1) - GetActorZ(tid2) >> 16;
	d = sqrt( x*x + y*y + z*z );
	return d;
}

function int xyDistance (int tid1, int tid2)
{
	int x, y, d;
	x = GetActorX(tid1) - GetActorX(tid2) >> 16; // Convert fixed point to integer
	y = GetActorY(tid1) - GetActorY(tid2) >> 16;
	d = sqrt( x*x + y*y );
	return d;
}

function int zdistance (int tid1, int tid2)
{
	int z;
	z = GetActorZ(tid1) - GetActorZ(tid2) >> 16;// Convert fixed point to integer
	return z;
}


function int ClosestPlayer (int max_distance) //Function to determine the closest player
{
int LowestDistance=max_distance;
int ClosestPlayerTID;
int CurrentDistance;
int FiringPlayer=ACS_ExecuteWithResult(257,0);
for(int h=0;h<=ServerMAX-1;h++)
	{
	if(PlayerInGame(h) && h+1000 != FiringPlayer && h+1000 != ActivatorTID())
		{
		CurrentDistance = xyzdistance(ActivatorTID(), h+1000);
			If(LowestDistance==0){LowestDistance=CurrentDistance;ClosestPlayerTID=h+1000;}
			If(CurrentDistance < LowestDistance)
			{
			LowestDistance=CurrentDistance;
			ClosestPlayerTID=h+1000;
			}
		}
	}
Return ClosestPlayerTID;
}

//LMS functions
Function int AlivePlayers(void)
{
int NotDeadPlayer = 0;
for(int i=0; i<ServerMAX; i++)
	{
	If(GetActorProperty(i+1000, APROP_HEALTH) > 0 && PlayerInGame(i)){NotDeadPlayer++;}
	}
Return(NotDeadPlayer);
}
	
Function int RedAlive(void)
{
int RedNotDead = 0;
for(int i=0; i < ServerMAX; i++)
	{
	If(GetActorProperty(i+1000, APROP_HEALTH) > 0 && PlayerInGame(i) && GetPlayerInfo(i, PLAYERINFO_TEAM) == 1){RedNotDead++;}
	}
Return(RedNotDead);
}

Function int BlueAlive(void)
{
int BlueNotDead = 0;
for(int i=0; i< ServerMAX; i++)
	{
	If(GetActorProperty(i+1000, APROP_HEALTH) > 0 && PlayerInGame(i)&& GetPlayerInfo(i, PLAYERINFO_TEAM) == 0){BlueNotDead++;}
	}
Return(BlueNotDead);
}

//Experimental functions 
Function int YellowFrags(void)
{
int O = ActivatorTID();
int CossackFrags=0;
For(int i = 0; i < ServerMAX; i++)
	{
	SetActivator(i+1000);
	If(GetPlayerInfo(i, PLAYERINFO_TEAM) == 2)
		{
		CossackFrags+=PlayerFrags();
		}
	}
SetActivator(O);
return(CossackFrags);
}

Function int PurpleFrags(void)
{
int O = ActivatorTID();
int MrXFrags=0;
For(int i = 0; i < ServerMAX; i++)
	{
	SetActivator(i+1000);
	If(GetPlayerInfo(i, PLAYERINFO_TEAM) == 3)
		{
		MrXFrags+=PlayerFrags();
		}
	}
SetActivator(O);
return(MrXFrags);
}
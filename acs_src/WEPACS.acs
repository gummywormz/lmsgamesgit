// [Mike] Scripts file for changing colors based on your weapon
#include "zcommon.acs"// [Lego] Always include this before 8bdmlib
#include "8bdmlib.acs"// included with MM8BDM under acs_source.
					  // See 8bdmlib.acs for details.
#library "wepacs"

// Translation DEFINEs
#DEFINE MEGABUSTER 0
#DEFINE BUBBLELEAD 1
#DEFINE LEAFSHIELD 2
#DEFINE ATOMICFIRE 3
#DEFINE SHADOWBLADE 4
#DEFINE NAPALMBOMB 5
#DEFINE AIRSHOOTER 6
#DEFINE HYPERBOMB 7
#DEFINE MAGNETMISSILE 8
#DEFINE TOPSPIN 9
#DEFINE NEEDLECANNON 10
#DEFINE GEMINILASER 11
#DEFINE SEARCHSNAKE 12
#DEFINE TIMESTOPPER 13
#DEFINE SUPERARM 14
#DEFINE ICESLASHER 15
#DEFINE THUNDERBEAM 16
#DEFINE METALBLADE 17
#DEFINE HARDKNUCKLE 18
#DEFINE DRILLBOMB 19
#DEFINE BLIZZARDATTACK 20
#DEFINE FIRESTORM 21
#DEFINE QUICKBOOMERANG 22
#DEFINE CRASHBOMB 23
#DEFINE CHARGEKICK 24
#DEFINE ROLLINGCUTTER 25
#DEFINE SPARKSHOCK 26
#DEFINE RINGBOOMERANG 27
#DEFINE GYROATTACK 28
#DEFINE POWERSTONE 29
#DEFINE DUSTCRUSHER 30
#DEFINE PHARAOHSHOT 31
#DEFINE WATERWAVE 32
#DEFINE CRYSTALEYE 33
#DEFINE SKULLBARRIER 34
#DEFINE FLAMEBLAST 35
#DEFINE PROTOBUSTER 36
#DEFINE YAMATOSPEAR 37
#DEFINE DIVEMISSILE 38
#DEFINE PLANTBARRIER 39
#DEFINE SILVERTOMAHAWK 40
#DEFINE WINDSTORM 41
#DEFINE KNIGHTCRUSH 42
#DEFINE STARCRASH 43
#DEFINE RAINFLUSH 44
#DEFINE SAKUGARNE 45
#DEFINE BASSBUSTER 46
#DEFINE BALLADECRACKER 47
#DEFINE SCREWCRUSHER 48
#DEFINE FLASHSTOPPER 49
#DEFINE GRAVITYHOLD 50
#DEFINE CENTAURFLASH 51
#DEFINE MIRRORBUSTER 52

#DEFINE BALLADEREAL 53

#DEFINE ATOMICFIRECRG1 60
#DEFINE ATOMICFIRECRG2 61
#DEFINE ATOMICFIRECRG3 62

#DEFINE PROTOCHARGE1 63
#DEFINE PROTOCHARGE2 64

#DEFINE ENKERCHARGE1 65
#DEFINE ENKERCHARGE2 66

#DEFINE METALMANREAL 67

#DEFINE BOSSPAIN 68

#DEFINE FREEZECRACKER 54
#DEFINE NOISECRUSH 55
#DEFINE THUNDERBOLT 56
#DEFINE JUNKSHIELD 57
#DEFINE WILDCOIL 58
#DEFINE SCORCHWHEEL 59
#DEFINE SLASHCLAW 69
#DEFINE DANGERWRAP 70

#DEFINE NOISECRUSHCRG1 71
#DEFINE NOISECRUSHCRG2 72
#DEFINE NOISECRUSHCRG3 73

#DEFINE WILDCOILCRG1 74
#DEFINE WILDCOILCRG2 75
#DEFINE WILDCOILCRG3 76

#DEFINE SUPERADAPTOR 77
#DEFINE SUPERADAPTORCRG1 78
#DEFINE SUPERADAPTORCRG2 79
#DEFINE SUPERADAPTORCRG3 80

#DEFINE FLAMESWORD 81
#DEFINE ICEWAVE 82
#DEFINE THUNDERCLAW 83
#DEFINE WATERBALLOON 84
#DEFINE TORNADOHOLD 85
#DEFINE FLASHBOMB 86
#DEFINE ASTROCRUSH 87
#DEFINE HOMINGSNIPER 88

#DEFINE HOMINGCHRG1 89
#DEFINE HOMINGCHRG2 90
#DEFINE HOMINGCHRG3 91

#DEFINE MEGACHARGE1 92
#DEFINE MEGACHARGE2 93
#DEFINE MEGACHARGE3 94

#DEFINE OILSLIDER 95
#DEFINE TIMESLOW 96

#DEFINE MEGABALL 100

#DEFINE DUOFIST 101
#DEFINE DUOCHARGE1 102
#DEFINE DUOCHARGE2 103
#DEFINE DUOCHARGE3 104

#DEFINE ICEDEATH 105

#DEFINE LASERCHARGE1 106
#DEFINE LASERCHARGE2 107

#DEFINE TENGUBLADE 170
#DEFINE WAVEBURNER 171
#DEFINE SPREADDRILL 172
#DEFINE MAGICCARD 173
#DEFINE REMOTEMINE 174
#DEFINE COPYVISION 175
#DEFINE ICEWALL 176
#DEFINE LIGHTNINGBOLT 177
#DEFINE TREBLEBOOST 178

// [Korby] Bass colors
#DEFINE TENGUBLADEB 179
#DEFINE WAVEBURNERB 180
#DEFINE SPREADDRILLB 181
#DEFINE MAGICCARDB 182
#DEFINE REMOTEMINEB 183
#DEFINE COPYVISIONB 184
#DEFINE ICEWALLB 185
#DEFINE LIGHTNINGBOLTB 186

#DEFINE PLUGBALL 187
#DEFINE LASERTRIDENT 188
#DEFINE TORNADOBLOW 189
#DEFINE JEWELSATELLITE 190
#DEFINE MAGMABAZOOKA 191
#DEFINE MAGMACHARGE1 192
#DEFINE MAGMACHARGE2 193
#DEFINE CONCRETESHOT 194
#DEFINE CONCRETEDAMAGE 195
#DEFINE BLACKHOLEBOMB 196
#DEFINE HORNETCHASER 197

#DEFINE SOLARBLAZE 198
#DEFINE WHEELCUTTER 199
#DEFINE REBOUNDSTRIKER 200
#DEFINE THUNDERWOOL 201
#DEFINE COMMANDOBOMB 202
#DEFINE CHILLSPIKE 203
#DEFINE WATERSHIELD 204
#DEFINE TRIPLEBLADE 205

#DEFINE GRABBUSTER 206
#DEFINE BUBBLEBOMB 207
#DEFINE PHOTONMISSILE 208
#DEFINE SALTWATER 209
#DEFINE ELECTRICSHOCK 210
#DEFINE BLACKHOLE 211
#DEFINE DEEPDIGGER 212
#DEFINE BREAKDASH 213
#DEFINE BREAKDASHCHARGE1 214
#DEFINE BREAKDASHCHARGE2 215
#DEFINE BREAKDASHCHARGE3 216
#DEFINE SPARKCHASER 217
#DEFINE MEGAARM 218
#DEFINE MEGAARMCHARGE1 219
#DEFINE MEGAARMCHARGE2 220
#DEFINE MEGAARMCHARGE3 221

#DEFINE MAX_WEAPONS_GLOBAL 87 // Maximum number of weapons for the following arrays
// v6's weapon total would be 94
// v7's weapon total would be 103
#DEFINE MAX_BUSTERS 7 // Maximum number of non-ammo buster upgrades for the following arrays
// v7's max busters would be 8

// Array Layout
//  0 - Weapon Name according to the Engine (Ex. RollingCutterWep)
//  1 - Weapon Ammo according to the Engine (Ex. RollingCutterAmmo)
//  2 - Weapon Name according to the Player (Ex. Rolling Cutter)
//  3 - Can pickup Ammo? (YES/NO)
//  4 - Can be given by Eddie? (YES/NO)
//  5 - Can be Stolen by Reggae? (YES/NO)
//  6 - LMS Slot

str weapons_ammo[MAX_WEAPONS_GLOBAL][7] = 
{
{"TrebleBoost", "TrebleBoostAmmo", "Treble Boost", "YES", "NO", "NO", "SLOT_NONE"},

{"SuperArmWep", "SuperArmAmmo", "Super Arm", "YES", "YES", "YES", "SLOT_POWER"},
{"HyperBombWep", "HyperBombAmmo", "Hyper Bomb", "YES", "YES", "YES", "SLOT_POWER"},
{"IceSlasherWep", "IceSlasherAmmo", "Ice Slasher", "YES", "YES", "YES", "SLOT_RAPID"},
{"ThunderBeamWep", "ThunderBeamAmmo", "Thunder Beam", "YES", "YES", "YES", "SLOT_RANGED"},
{"FireStormWep", "FireStormAmmo", "Fire Storm", "YES", "YES", "YES", "SLOT_RANGED"},
{"RollingCutterWep", "RollingCutterAmmo", "Rolling Cutter", "YES", "YES", "YES", "SLOT_CLOSE"},
{"TimeSlowWep", "TimeSlowAmmo", "Time Slow", "YES", "YES", "YES", "SLOT_NONE"},
{"OilSliderWep", "OilSliderAmmo", "Oil Slider", "YES", "YES", "YES", "SLOT_CLOSE"},

{"BubbleLeadWep", "BubbleLeadAmmo", "Bubble Lead", "YES", "YES", "YES", "SLOT_CLOSE"},
{"MetalBladeWep", "MetalBladeAmmo", "Metal Blade", "YES", "YES", "YES", "SLOT_RAPID"},
{"AtomicFireWep", "AtomicFireAmmo", "Atomic Fire", "YES", "YES", "YES", "SLOT_POWER"},
{"LeafShieldWep", "LeafShieldAmmo", "Leaf Shield", "YES", "YES", "YES", "SLOT_SHIELD"},
{"AirShooterWep", "AirShooterAmmo", "Air Shooter", "YES", "YES", "YES", "SLOT_CLOSE"},
{"QuickBoomerangWep", "QuickBoomerangAmmo", "Quick Boomerang", "YES", "YES", "YES", "SLOT_RAPID"},
{"CrashBombWep", "CrashBombAmmo", "Crash Bomb", "YES", "YES", "YES", "SLOT_POWER"},
{"TimeStopperWep", "TimeStopperAmmo", "Time Stopper", "NO", "NO", "YES", "SLOT_NONE"}, 

{"MagnetMissileWep", "MagnetMissileAmmo", "Magnet Missile", "YES", "YES", "YES", "SLOT_RANGED"},
{"TopSpinWep", "TopSpinAmmo", "Top Spin", "YES", "YES", "YES", "SLOT_CLOSE"},
{"NeedleCannonWep", "NeedleCannonAmmo", "Needle Cannon", "YES", "YES", "YES", "SLOT_RAPID"},
{"ShadowBladeWep", "ShadowBladeAmmo", "Shadow Blade", "YES", "YES", "YES", "SLOT_CLOSE"},
{"GeminiLaserWep", "GeminiLaserAmmo", "Gemini Laser", "YES", "YES", "YES", "SLOT_RANGED"},
{"SearchSnakeWep", "SearchSnakeAmmo", "Search Snake", "YES", "YES", "YES", "SLOT_RANGED"},
{"HardKnuckleWep", "HardKnuckleAmmo", "Hard Knuckle", "YES", "YES", "YES", "SLOT_POWER"},
{"SparkShockWep", "SparkShockAmmo", "Spark Shock", "YES", "YES", "YES", "SLOT_RANGED"},

{"DrillBombWep", "DrillBombAmmo", "Drill Bomb", "YES", "YES", "YES", "SLOT_POWER"},
{"RingBoomerangWep", "RingBoomerangAmmo", "Ring Boomerang", "YES", "YES", "YES", "SLOT_CLOSE"},
{"DustCrusherWep", "DustCrusherAmmo", "Dust Crusher", "YES", "YES", "YES", "SLOT_RANGED"},
{"PharaohShotWep", "PharaohShotAmmo", "Pharaoh Shot", "YES", "YES", "YES", "SLOT_POWER"},
{"SkullBarrierWep", "SkullBarrierAmmo", "Skull Barrier", "YES", "YES", "YES", "SLOT_SHIELD"},
{"DiveMissileWep", "DiveMissileAmmo", "Dive Missile", "YES", "YES", "YES", "SLOT_RANGED"},
{"RainFlushWep", "RainFlushAmmo", "Rain Flush", "YES", "YES", "YES", "SLOT_NONE"},
{"FlashStopperWep", "FlashStopperAmmo", "Flash Stopper", "YES", "YES", "YES", "SLOT_NONE"},

{"NapalmBombWep", "NapalmBombAmmo", " Napalm Bomb", "YES", "YES", "YES", "SLOT_POWER"},
{"ChargeKickWep", "ChargeKickAmmo", "Charge Kick", "YES", "YES", "YES", "SLOT_CLOSE"},
{"GyroAttackWep", "GyroAttackAmmo", "Gyro Attack", "YES", "YES", "YES", "SLOT_RANGED"},
{"PowerStoneWep", "PowerStoneAmmo", "Power Stone", "YES", "YES", "YES", "SLOT_CLOSE"},
{"WaterWaveWep", "WaterWaveAmmo", "Water Wave", "YES", "YES", "YES", "SLOT_RAPID"},
{"CrystalEyeWep", "CrystalEyeAmmo", "Crystal Eye", "YES", "YES", "YES", "SLOT_POWER"},
{"StarCrashWep", "StarCrashAmmo", "Star Crash", "YES", "YES", "YES", "SLOT_SHIELD"},
{"GravityHoldWep", "GravityHoldAmmo", "Gravity Hold", "YES", "YES", "YES", "SLOT_NONE"},

{"BlizzardAttackWep", "BlizzardAttackAmmo", "Blizzard Attack", "YES", "YES", "YES", "SLOT_RANGED"},
{"FlameBlastWep", "FlameBlastAmmo", "Flame Blast", "YES", "YES", "YES", "SLOT_CLOSE"},
{"YamatoSpearWep", "YamatoSpearAmmo", "Yamato Spear", "YES", "YES", "YES", "SLOT_RAPID"},
{"PlantBarrierWep", "PlantBarrierAmmo", "Plant Barrier", "YES", "YES", "YES", "SLOT_SHIELD"},
{"SilverTomahawkWep", "SilverTomahawkAmmo", "Silver Tomahawk", "YES", "YES", "YES", "SLOT_RANGED"},
{"WindStormWep", "WindStormAmmo", "Wind Storm", "YES", "YES", "YES", "SLOT_RANGED"},
{"KnightCrushWep", "KnightCrushAmmo", "Knight Crush", "YES", "YES", "YES", "SLOT_CLOSE"},
{"CentaurFlashWep", "CentaurFlashAmmo", "Centaur Flash", "YES", "YES", "YES", "SLOT_NONE"},

{"FreezeCrackerWep", "FreezeCrackerAmmo", "Freeze Cracker", "YES", "YES", "YES", "SLOT_RANGED"},
{"NoiseCrushWep", "NoiseCrushAmmo", "Noise Crush", "YES", "YES", "YES", "SLOT_RANGED"},
{"WildCoilWep", "WildCoilAmmo", "Wild Coil", "YES", "YES", "YES", "SLOT_CLOSE"},
{"DangerWrapWep", "DangerWrapAmmo", "Danger Wrap", "YES", "YES", "YES", "SLOT_POWER"},
{"ScorchWheelWep", "ScorchWheelAmmo", "Scorch Wheel", "YES", "YES", "YES", "SLOT_SHIELD"},
{"JunkShieldWep", "JunkShieldAmmo", "Junk Shield", "YES", "YES", "YES", "SLOT_SHIELD"},
{"SlashClawWep", "SlashClawAmmo", "Slash Claw", "YES", "YES", "YES", "SLOT_CLOSE"},
{"ThunderBoltWep", "ThunderBoltAmmo", "Thunder Bolt", "YES", "YES", "YES", "SLOT_RANGED"},

{"AstroCrushWep", "AstroCrushAmmo", "Astro Crush", "YES", "YES", "YES", "SLOT_NONE"},
{"FlameSwordWep", "FlameSwordAmmo", "Flame Sword", "YES", "YES", "YES", "SLOT_CLOSE"},
{"ThunderClawWep", "ThunderClawAmmo", "Thunder Claw", "YES", "YES", "YES", "SLOT_CLOSE"},
{"HomingSniperWep", "HomingSniperAmmo", "Homing Sniper", "YES", "YES", "YES", "SLOT_RANGED"},
{"WaterBalloonWep", "WaterBalloonAmmo", "Water Balloon", "YES", "YES", "YES", "SLOT_RAPID"},
{"MegaBallWep", "MegaBallAmmo", "Mega Ball", "YES", "YES", "YES", "SLOT_RANGED"},
{"FlashBombWep", "FlashBombAmmo", "Flash Bomb", "YES", "YES", "YES", "SLOT_POWER"},
{"IceWaveWep", "IceWaveAmmo", "Ice Wave", "YES", "YES", "YES", "SLOT_RANGED"},
{"TornadoHoldWep", "TornadoHoldAmmo", "Tornado Hold", "YES", "YES", "YES", "SLOT_CLOSE"},

{"TenguBladeWep", "TenguBladeAmmo", "Tengu Blade", "YES", "YES", "YES", "SLOT_CLOSE"},
{"WaveBurnerWep", "WaveBurnerAmmo", "Wave Burner", "YES", "YES", "YES", "SLOT_RAPID"},
{"SpreadDrillWep", "SpreadDrillAmmo", "Spread Drill", "YES", "YES", "YES", "SLOT_POWER"},
{"MagicCardWep", "MagicCardAmmo", "Magic Card", "YES", "YES", "YES", "SLOT_CLOSE"},
{"RemoteMineWep", "RemoteMineAmmo", "Remote Mine", "YES", "YES", "YES", "SLOT_POWER"},
{"CopyVisionWep", "CopyVisionAmmo", "Copy Vision", "YES", "YES", "YES", "SLOT_RANGED"},
{"IceWallWep", "IceWallAmmo", "Ice Wall", "YES", "YES", "YES", "SLOT_SHIELD"},
{"LightningBoltWep", "LightningBoltAmmo", "Lightning Bolt", "YES", "YES", "YES", "SLOT_NONE"},

{"PlugBallWep", "PlugBallAmmo", "Plug Ball", "YES", "YES", "YES", "SLOT_RAPID"},
{"LaserTridentWep", "LaserTridentAmmo", "Laser Trident", "YES", "YES", "YES", "SLOT_RANGED"},
{"BlackHoleBombWep", "BlackHoleBombAmmo", "Black Hole Bomb", "YES", "YES", "YES", "SLOT_NONE"},
{"JewelSatelliteWep", "JewelSatelliteAmmo", "Jewel Satellite", "YES", "YES", "YES", "SLOT_SHIELD"},
{"ConcreteShotWep", "ConcreteShotAmmo", "Concrete Shot", "YES", "YES", "YES", "SLOT_CLOSE"},
{"TornadoBlowWep", "TornadoBlowAmmo", "Tornado Blow", "YES", "YES", "YES", "SLOT_NONE"},
{"HornetChaserWep", "HornetChaserAmmo", "Hornet Chaser", "YES", "YES", "YES", "SLOT_CLOSE"},
{"MagmaBazookaWep", "MagmaBazookaAmmo", "Magma Bazooka", "YES", "YES", "YES", "SLOT_CLOSE"},
 
{"SolarBlazeWep", "SolarBlazeAmmo", "Solar Blaze", "YES", "YES", "YES", "SLOT_NONE"},
/*
{"WheelCutterWep", "WheelCutterAmmo", "Wheel Cutter", "YES", "YES", "YES", "SLOT_CLOSE"},
{"ReboundStrikerWep", "ReboundStrikerAmmo", "Rebound Striker", "YES", "YES", "YES", "SLOT_RANGED"},
{"ThunderWoolWep", "ThunderWoolAmmo", "Thunder Wool", "YES", "YES", "YES", "SLOT_CLOSE"},
{"CommandoBombWep", "CommandoBombAmmo", "Commando Bomb", "YES", "YES", "YES", "SLOT_POWER"},
{"ChillSpikeWep", "ChillSpikeAmmo", "Chill Spike", "YES", "YES", "YES", "SLOT_CLOSE"},
{"WaterShieldWep", "WaterShieldAmmo", "Water Shield", "YES", "YES", "YES", "SLOT_SHIELD"},
{"TripleBladeWep", "TripleBladeAmmo", "TripleBlade", "YES", "YES", "YES", "SLOT_CLOSE",},
*/
/*
{"GrabBusterWep", "GrabBusterAmmo", "Grab Buster", "YES", "YES", "YES", "SLOT_RANGED"},
{"BubbleBombWep", "BubbleBombAmmo", "BubbleBomb", "YES", "YES", "YES", "SLOT_CLOSE"},
{"PhotonMissileWep", "PhotonMissileAmmo", "Photon Missile", "YES", "YES", "YES", "SLOT_POWER"},
{"SaltWaterWep", "SaltWaterAmmo", "Salt Water", "YES", "YES", "YES", "SLOT_CLOSE"},
{"ElectricShockWep", "ElectricShockAmmo", "Commando Bomb", "YES", "YES", "YES", "SLOT_CLOSE"},
{"BlackHoleWep", "BlackHoleAmmo", "Black Hole", "YES", "YES", "YES", "SLOT_NONE"},
{"DeepDiggerWep", "DeepDiggerAmmo", "Deep Digger", "YES", "YES", "YES", "SLOT_POWER"},
{"BreakDashWep", "BreakDashAmmo", "Break Dash", "YES", "YES", "YES", "SLOT_CLOSE"},
{"SparkChaserWep", "SparkChaserAmmo", "Spark Chaser", "YES", "YES", "YES", "SLOT_RANGED"},
*/
{"SakugarneWep", "SakugarneAmmo", "Sakugarne", "YES", "YES", "YES", "SLOT_CLOSE"},
{"BalladeCrackerWep", "BalladeCrackerAmmo", "Ballade Cracker", "YES", "YES", "YES", "SLOT_POWER"},
{"ScrewCrusherWep", "ScrewCrusherAmmo", "Screw Crusher", "YES", "YES", "YES", "SLOT_RAPID"},
{"MirrorBusterWep", "MirrorBusterAmmo", "Mirror Buster", "YES", "YES", "YES", "SLOT_SHIELD"}
};

str BusterUpgrades[MAX_BUSTERS] =
{
"ProtoUpgrade",
"ArrowBusterUpgrade",
"LaserBusterUpgrade",
"BassUpgrade",
"DuoFistUpgrade",
"AdaptorUpgrade",
"TrebleBoostUpgrade"/*,
"MegaArmUpgrade"*/
};


//Color Translation script
script 998 (int weap, int nosound) 
{
	if(nosound==0)
		LocalAmbientSound("menu/cursor",127); // Play weapon switch noise

	If(IsTeamGame==1)
		{
		Switch(PlayerTeam())
			{
			Case 0:
				weap = COLOR_LIGHT;
				break;
			Case 1:
				weap = COLOR_WILY;
				break;
			Case 2:
				weap = COLOR_COSSACK;
				break;
			Case 3:
				weap = COLOR_KING;
				break;
			}
		}
	
	Thing_SetTranslation(0, weap);
}

Script 993 OPEN //Defines translations colors
{
	If(ACS_ExecuteWithResult(975, 1)==1)
	{
		IsTeamGame = 1; // If it's a team game, change the variable.
	}
	
	CreateTranslation (BUBBLELEAD, 192:192=4:4, 198:198=93:93);
	CreateTranslation (LEAFSHIELD, 192:192=4:4, 198:198=129:129);
	CreateTranslation (ATOMICFIRE, 192:192=229:229, 198:198=41:41);
	CreateTranslation (ATOMICFIRECRG1, 192:192=229:229, 198:198=41:41, 0:2=201:201, 5:8=201:201, 243:247=201:201);
	CreateTranslation (ATOMICFIRECRG2, 192:192=229:229, 198:198=193:193, 0:2=37:37, 5:8=37:37, 243:247=37:37);
	CreateTranslation (ATOMICFIRECRG3, 192:192=229:229, 198:198=4:4, 0:2=4:4, 5:8=4:4, 243:247=4:4);
	CreateTranslation (SHADOWBLADE, 192:192=34:34, 198:198=239:239);
	CreateTranslation (NAPALMBOMB, 192:192=216:216, 198:198=75:75);
	CreateTranslation (AIRSHOOTER, 192:192=4:4);
	CreateTranslation (HYPERBOMB, 192:192=4:4, 198:198=110:110);
	CreateTranslation (MAGNETMISSILE, 192:192=87:87, 198:198=227:227);
	CreateTranslation (TOPSPIN, 192:192=52:52, 198:198=93:93);
	CreateTranslation (NEEDLECANNON, 192:192=4:4, 198:198=220:220);
	CreateTranslation (GEMINILASER, 192:192=4:4,198:198=197:197);
	CreateTranslation (SEARCHSNAKE, 192:192=4:4, 198:198=110:110);
	CreateTranslation (TIMESTOPPER, 192:192=34:34, 198:198=239:239);
	CreateTranslation (SUPERARM, 192:192=4:4, 198:198=220:220);
	CreateTranslation (ICESLASHER, 192:192=4:4, 198:198=75:75);
	CreateTranslation (THUNDERBEAM, 192:192=215:215, 198:198=94:94);
	CreateTranslation (METALBLADE, 192:192=210:210, 198:198=164:164);
	CreateTranslation (HARDKNUCKLE, 192:192=87:87, 198:198=199:199);
	CreateTranslation (DRILLBOMB, 192:192=87:87, 198:198=227:227);
	CreateTranslation (BLIZZARDATTACK, 192:192=4:4, 198:198=197:197);
	CreateTranslation (FIRESTORM, 192:192=229:229, 198:198=227:227);
	CreateTranslation (QUICKBOOMERANG, 192:192=34:34, 198:198=39:39);
	CreateTranslation (CRASHBOMB, 192:192=4:4, 198:198=225:225);
	CreateTranslation (CHARGEKICK, 192:192=4:4, 198:198=225:225);
	CreateTranslation (ROLLINGCUTTER, 192:192=4:4, 198:198=94:94);
	CreateTranslation (SPARKSHOCK, 192:192=4:4, 198:198=225:225);
	CreateTranslation (RINGBOOMERANG, 192:192=215:215, 198:198=230:230);
	CreateTranslation (GYROATTACK, 192:192=4:4, 198:198=128:128);
	CreateTranslation (POWERSTONE, 192:192=4:4, 198:198=46:46);
	CreateTranslation (DUSTCRUSHER, 192:192=4:4, 198:198=93:93);
	CreateTranslation (PHARAOHSHOT, 192:192=52:52, 198:198=225:225);
	CreateTranslation (WATERWAVE, 192:192=4:4);
	CreateTranslation (CRYSTALEYE, 192:192=4:4, 198:198=193:193);
	CreateTranslation (SKULLBARRIER, 198:198=197:197);
	CreateTranslation (FLAMEBLAST, 192:192=52:52, 198:198=225:225);
	CreateTranslation (PROTOBUSTER, 192:192=87:87, 198:198=42:42);
	CreateTranslation (PROTOCHARGE1, 192:192=87:87, 198:198=227:227, 0:2=253:253, 5:8=253:253, 243:247=253:253);
	CreateTranslation (PROTOCHARGE2, 192:192=160:160, 198:198=148:148, 0:2=166:166, 5:8=204:166, 243:247=166:166);
	CreateTranslation (YAMATOSPEAR, 192:192=4:4, 198:198=236:236);
	CreateTranslation (DIVEMISSILE, 192:192=4:4);
	CreateTranslation (PLANTBARRIER, 192:192=4:4, 198:198=39:39);
	CreateTranslation (SILVERTOMAHAWK, 192:192=52:52, 198:198=220:220);
	CreateTranslation (WINDSTORM, 192:192=4:4, 198:198=93:93);
	CreateTranslation (KNIGHTCRUSH, 192:192=87:87);
	CreateTranslation (STARCRASH, 192:192=229:229, 198:198=220:220);
	CreateTranslation (RAINFLUSH, 192:192=4:4, 198:198=104:104);
	CreateTranslation (SAKUGARNE, 192:192=138:138, 198:198=130:130);
	CreateTranslation (BASSBUSTER, 192:192=217:217, 198:198=95:95);
	CreateTranslation (BALLADECRACKER, 192:192=64:64, 198:198=62:62);
	CreateTranslation (SCREWCRUSHER, 192:192=54:54, 198:198=42:42);
	CreateTranslation (FLASHSTOPPER, 192:192=4:4, 198:198=239:239);
	CreateTranslation (GRAVITYHOLD, 192:192=4:4, 198:198=239:239);
	CreateTranslation (CENTAURFLASH, 192:192=4:4, 198:198=117:117);
	CreateTranslation (MIRRORBUSTER, 192:192=229:229, 198:198=76:76);
	CreateTranslation (ENKERCHARGE1, 192:192=229:229, 198:198=199:199, 0:2=4:4, 5:8=4:4, 243:247=4:4);
	CreateTranslation (ENKERCHARGE2, 192:192=229:229, 198:198=199:199, 0:2=196:204, 5:8=196:204, 243:247=204:204);
	CreateTranslation (BALLADEREAL, 192:192=228:228, 198:198=62:62);
	CreateTranslation (METALMANREAL, 192:192=228:228, 198:198=41:41);
	CreateTranslation (FREEZECRACKER, 192:192=4:4, 198:198=203:203);
	CreateTranslation (NOISECRUSH, 192:192=204:204, 198:198=61:61);
	CreateTranslation (NOISECRUSHCRG1, 192:192=204:204, 198:198=61:61, 0:2=112:112, 5:8=112:112, 243:247=112:112);
	CreateTranslation (NOISECRUSHCRG2, 192:192=0:0, 198:198=204:204, 0:2=61:61, 5:8=61:61, 243:247=61:61);
	CreateTranslation (NOISECRUSHCRG3, 192:192=61:61, 198:198=0:0, 0:2=204:204, 5:8=204:204, 243:247=204:204);
	CreateTranslation (WILDCOIL, 192:192=109:109, 198:198=238:238);
	CreateTranslation (WILDCOILCRG1, 192:192=109:109, 198:198=238:238, 0:2=41:41, 5:8=41:41, 243:247=41:41);
	CreateTranslation (WILDCOILCRG2, 192:192=0:0, 198:198=109:109, 0:2=238:238, 5:8=238:238, 243:247=238:238);
	CreateTranslation (WILDCOILCRG3, 192:192=238:238, 198:198=0:0, 0:2=109:109, 5:8=109:109, 243:247=109:109);
	CreateTranslation (DANGERWRAP, 192:192=4:4, 198:198=230:230);
	CreateTranslation (SCORCHWHEEL, 192:192=93:93, 198:198=42:42);
	CreateTranslation (JUNKSHIELD, 192:192=68:68, 198:198=94:94);
	CreateTranslation (SLASHCLAW, 192:192=228:228, 198:198=111:111);
	CreateTranslation (THUNDERBOLT, 192:192=228:228, 198:198=73:73);
	CreateTranslation (BOSSPAIN, 5:247=4:4,0:3=4:4);
	CreateTranslation (SUPERADAPTOR, 192:192=4:4, 198:198=42:42);
	CreateTranslation (SUPERADAPTORCRG1, 192:192=4:4, 198:198=42:42, 0:2=22:22, 5:8=22:22, 243:247=22:22);
	CreateTranslation (SUPERADAPTORCRG2, 192:192=0:0, 198:198=42:42, 0:2=4:4, 5:8=4:4, 243:247=4:4);
	CreateTranslation (SUPERADAPTORCRG3, 192:192=4:4, 198:198=0:0, 0:2=42:42, 5:8=42:42, 243:247=42:42);
	CreateTranslation (THUNDERCLAW, 198:198=220:220);
	CreateTranslation (HOMINGSNIPER, 198:198=230:230);
	CreateTranslation (HOMINGCHRG1, 198:198=230:230, 244:247=26:26);
	CreateTranslation (HOMINGCHRG2, 192:192=0:0, 198:198=192:192, 244:247=230:230);
	CreateTranslation (HOMINGCHRG3, 192:192=230:230, 198:198=0:0, 244:247=192:192);
	CreateTranslation (WATERBALLOON, 198:198=62:62);
	CreateTranslation (FLAMESWORD, 192:192=248:248, 198:198=41:41);
	CreateTranslation (ICEWAVE, 192:192=229:229, 198:198=205:205);
	CreateTranslation (TORNADOHOLD, 192:192=236:236, 198:198=194:194);
	CreateTranslation (FLASHBOMB, 192:192=229:229, 198:198=77:77);
	CreateTranslation (ASTROCRUSH, 192:192=229:229, 198:198=128:128);
	CreateTranslation (MEGACHARGE1, 0:2=39:39, 5:8=39:39, 243:247=39:39);
	CreateTranslation (MEGACHARGE2, 192:192=198:198, 198:198=247:247, 0:2=192:192, 243:247=192:192);
	CreateTranslation (MEGACHARGE3, 192:192=247:247, 198:198=192:192, 0:2=198:198, 243:247=198:198);
	CreateTranslation (OILSLIDER, 192:192=68:68, 198:198=47:47);
	CreateTranslation (TIMESLOW, 192:192=34:34, 198:198=239:239);
	CreateTranslation (MEGABALL, 192:192=197:197, 198:198=239:239);
	CreateTranslation (DUOFIST, 192:192=220:220, 198:198=195:195);
	CreateTranslation (DUOCHARGE1, 192:192=220:220, 198:198=195:195, 5:8=192:192, 243:247=192:192);
	CreateTranslation (DUOCHARGE2, 192:192=247:247, 198:198=192:192, 5:8=195:195, 243:247=195:195);
	CreateTranslation (DUOCHARGE3, 192:192=195:195, 198:198=4:4, 5:8=192:192, 243:247=192:192);
	CreateTranslation (ICEDEATH, 192:192=4:4, 198:198=201:201, 5:8=72:72, 243:247=72:72, 208:215=4:4);
	CreateTranslation (LASERCHARGE1, 5:8=70:70, 243:247=70:70);
	CreateTranslation (LASERCHARGE2, 192:192=100:100, 198:198=109:109, 5:8=104:104, 243:247=104:104);

	CreateTranslation (TENGUBLADE, 192:192=208:208, 198:198=93:93);
	CreateTranslation (WAVEBURNER, 192:192=218:218, 198:198=40:40);
	CreateTranslation (SPREADDRILL, 192:192=87:87, 198:198=220:220);
	CreateTranslation (MAGICCARD, 192:192=236:236, 198:198=3:3);
	CreateTranslation (REMOTEMINE, 192:192=41:41, 198:198=3:3);
	CreateTranslation (COPYVISION, 192:192=201:201, 198:198=110:110);
	CreateTranslation (ICEWALL, 192:192=200:200, 198:198=75:75);
	CreateTranslation (LIGHTNINGBOLT, 192:192=93:93, 198:198=229:229);
	CreateTranslation (TREBLEBOOST, 192:192=62:62,  198:198=95:95);

	CreateTranslation (TENGUBLADEB, 192:192=93:93, 198:198=3:3);
	CreateTranslation (WAVEBURNERB, 192:192=204:204, 198:198=132:132);
	CreateTranslation (SPREADDRILLB, 192:192=93:93, 198:198=43:43);
	CreateTranslation (MAGICCARDB, 192:192=111:111, 198:198=166:166);
	CreateTranslation (REMOTEMINEB, 192:192=41:41, 198:198=60:60);
	CreateTranslation (COPYVISIONB, 192:192=59:59, 198:198=3:3);
	CreateTranslation (ICEWALLB, 192:192=197:197, 198:198=3:3);
	CreateTranslation (LIGHTNINGBOLTB, 192:192=217:217, 198:198=59:59);

	CreateTranslation (PLUGBALL, 192:192=4:4, 198:198=39:39);
	CreateTranslation (LASERTRIDENT, 192:192=228:228, 198:198=72:72);
	CreateTranslation (TORNADOBLOW, 192:192=4:4, 198:198=111:111);
	CreateTranslation (JEWELSATELLITE, 192:192=4:4, 198:198=193:193);
	CreateTranslation (MAGMABAZOOKA, 192:192=216:216, 198:198=42:42);
	CreateTranslation (MAGMACHARGE1, 192:192=216:216, 198:198=42:42, 0:2=38:38, 5:8=38:38, 243:247=38:38);
	CreateTranslation (MAGMACHARGE2, 192:192=36:36, 198:198=229:229, 0:2=216:216, 5:8=216:216, 243:247=216:216);
	CreateTranslation (CONCRETESHOT, 192:192=88:88, 198:198=95:95);
	CreateTranslation (CONCRETEDAMAGE, 13:246=95:95, 248:255=95:95, 0:12=88:88, 247:247=88:88);
	CreateTranslation (BLACKHOLEBOMB, 192:192=59:59, 198:198=62:62);
	CreateTranslation (HORNETCHASER, 192:192=4:4,  198:198=228:228);

	CreateTranslation (SOLARBLAZE, 192:192=248:248, 198:198=222:222);
	CreateTranslation (WHEELCUTTER, 192:192=4:4, 198:198=95:95);
	CreateTranslation (REBOUNDSTRIKER, 192:192=38:38, 198:198=251:251);
	CreateTranslation (THUNDERWOOL, 192:192=248:248, 198:198=95:95);
	CreateTranslation (COMMANDOBOMB, 192:192=88:88, 198:198=222:222);
	CreateTranslation (CHILLSPIKE, 192:192=202:202, 198:198=207:207);
	CreateTranslation (WATERSHIELD, 192:192=201:201, 198:198=74:74);
	CreateTranslation (TRIPLEBLADE, 192:192=4:4, 198:198=251:251);

	CreateTranslation (GRABBUSTER, 192:192=4:4, 198:198=104:104);
	CreateTranslation (BUBBLEBOMB, 192:192=4:4, 198:198=229:229);
	CreateTranslation (PHOTONMISSILE, 192:192=229:229, 198:198=199:199);
	CreateTranslation (SALTWATER, 192:192=4:4);
	CreateTranslation (ELECTRICSHOCK, 192:192=229:229, 198:198=130:130);
	CreateTranslation (BLACKHOLE, 192:192=4:4, 198:198=235:235);
	CreateTranslation (DEEPDIGGER, 192:192=4:4, 198:198=227:227);
	CreateTranslation (BREAKDASH, 192:192=4:4, 198:198=63:63);
	CreateTranslation (BREAKDASHCHARGE1, 192:192=4:4, 198:198=63:63, 0:2=109:109, 5:8=109:109, 243:247=109:109);
	CreateTranslation (BREAKDASHCHARGE2, 192:192=63:63, 198:198=247:247, 0:2=4:4, 243:247=4:4);
	CreateTranslation (BREAKDASHCHARGE3, 192:192=247:247, 198:198=4:4, 0:2=63:63, 243:247=63:63);
	CreateTranslation (SPARKCHASER, 192:192=104:104);
	//CreateTranslation (SPARKCHASER, 198:198=110:110);
	CreateTranslation (MEGAARM, 192:192=4:4, 198:198=88:88, 210:210=88:88);
	CreateTranslation (MEGAARMCHARGE1, 192:192=4:4, 198:198=88:88, 210:210=88:88, 0:2=4:4, 5:8=4:4, 243:247=4:4);
	CreateTranslation (MEGAARMCHARGE2, 192:192=0:0, 198:198=4:4, 210:210=4:4, 0:2=94:94, 5:8=94:94, 243:247=94:94);
	CreateTranslation (MEGAARMCHARGE3, 192:192=94:94, 198:198=0:0, 210:210=0:0, 0:2=88:88, 5:8=88:88, 243:247=88:88);
	
	CreateTranslation (COLOR_LIGHT, 192:192=205:205, 198:198=74:74);
	CreateTranslation (COLOR_WILY, 192:192=171:171, 198:198=41:41);
	CreateTranslation (COLOR_COSSACK, 192:192=104:104, 198:198=128:128);
	CreateTranslation (COLOR_KING, 192:192=229:229, 198:198=232:232);
}


Script 992 (int amount, int AmmoMode) // Script to determine which weapon to give ammo to
{
	Switch(AmmoMode)
	{
	Case 1: // If this is an mtank, give exactly the ammo of each weapon and terminate
		For(int i = 0; i < MAX_WEAPONS_GLOBAL; i++)
		{
			If(CheckInventory(weapons_ammo[i][0]) == 1)
			{
				GiveInventory(weapons_ammo[i][1], GetAmmoCapacity(weapons_ammo[i][1]));
			}
		}
		terminate;

	Case 2: // Double ammo for Energy Saver
		For(i = 0; i < MAX_WEAPONS_GLOBAL; i++)
		{
			If(CheckInventory(weapons_ammo[i][1]) > 0)
			{
				GiveInventory(weapons_ammo[i][1], CheckInventory(weapons_ammo[i][1]));
			}
		}
		terminate;
	}
	
	
	// Which weapon player currently has equipped.
	int ThisWeapon = WhichWeapon();

	//print(i:ThisWeapon);

	If(CheckInventory("EnergyBalancerActive"))
	{
		If(CheckInventory(weapons_ammo[ThisWeapon][1]) == GetAmmoCapacity(weapons_ammo[i][1]) || ThisWeapon < 0)  // If player has the Energy Balancer, then check to see if the currently selected weapon is not at maximum
		{
			ThisWeapon = EnergyBalancer(); // Finds the lowest ammo weapon using the Energy Balancer function and sets it as the weapon to fill
		}
	}

	If(ThisWeapon >= 0) //If this weapon is not a buster
	{
		// [Lego] Ammo capsules now specify a percentage
		// This percentage is then converted to fixed, then divided by 100.
		int percentage = FixedDiv(amount << 16, 100.0);
		
		amount = (GetAmmoCapacity(weapons_ammo[ThisWeapon][1]) * percentage) >> 16;
		//printbold(s:"Percentage is: ", f:percentage, s:"\nAmount is:", i:amount);
			
		int AmmoMultiplier = 1.0;
		
		Amount = FixedMul(Amount, AmmoMultiplier);
		//printbold(i:Amount);
		GiveInventory(weapons_ammo[ThisWeapon][1], amount);
	}
}


script 984 (void) // Does the player have the energy balancer or a weapon that is not full? If so, pickup ammo
{
	if(CheckInventory("EnergyBalancerActive")==1)
	{
		SetResultValue( TRUE );
	}
	else
	{
		int ThisWeapon = WhichWeapon();

		if(CheckInventory(weapons_ammo[ThisWeapon][1]) == GetAmmoCapacity(weapons_ammo[ThisWeapon][1]) || ThisWeapon < 0)
		{
			SetResultValue( FALSE );
		}
		else
		{
			SetResultValue( TRUE );
		}
	}
}


// Player Color (alternate, no sound)
//
script 991 (int weap)
{
ACS_ExecuteAlways(998, 0, weap, 1);
}

//Eddie Random Weapon script
Script 256 (void)
{
	int i = 0;
	int TotalWeapons = MAX_WEAPONS_GLOBAL + MAX_BUSTERS;
	int ThePlayer = ACS_ExecuteWithResult(257);
	bool finished = false;
	
	while(!finished)
	{
		int RandomSelection = random(1, TotalWeapons)-1;
		int WeaponName;
		
		if(RandomSelection >= MAX_WEAPONS_GLOBAL)
		{
			RandomSelection-=MAX_WEAPONS_GLOBAL;
			WeaponName = BusterUpgrades[RandomSelection];
		}
		else
		{
			WeaponName = Weapons_Ammo[RandomSelection][0];
		}
		
		//printbold(i:RandomSelection, s:" - ", s:WeaponName);
		
		if(Weapons_Ammo[RandomSelection][4] != "NO")
		{
			if(CheckActorInventory(ThePlayer, WeaponName) && i < 35)
			{
				i++;
			}
			else
			{
				finished = true;
			}
		}
	}

	// [Lego] This would cause the weapon to not spawn under certain circumstances.
	//SpawnProjectile(0, WeaponName, GetActorAngle(0)>>8, 75, 40, 1.0, 0);
	
	int tempTID = thePlayer + 3000;
	SpawnForced(weaponName, GetActorX(0), GetActorY(0), GetActorZ(0), tempTID);
	ThrustThing(GetActorAngle(0)>>8, 9, false, tempTID);
	ThrustThingZ(tempTID, 10, 0, 0);
	Thing_ChangeTID(tempTID, 0);
}


// [Mess] Weapon Energy color script - "cl_NoEnergyColors true" to disable
Script 255 ENTER CLIENTSIDE
{
	If(PlayerIsBot(PlayerNumber()))
	{
		terminate; //Since this is pointless for bots
	}
	Delay(10);
	
	If(GetCvar("cl_NoEnergyColors") == 0)
	{
		// Declare the console variable [old method]
		ConsoleCommand("set cl_NoEnergyColors 0");
		ConsoleCommand("ArchiveCvar cl_NoEnergyColors");
	}
	
	If(GetCvar("cl_NoEnergyColors") > 0)
	{
		ConsoleCommand("ArchiveCvar cl_NoEnergyColors 1");
		terminate;
	}
	
	While(PlayerInGame(ConsolePlayerNumber()))
	{
		If(PlayerNumber()!=ConsolePlayerNumber())
		{
			SetActivator(ConsolePlayerNumber()+1000);
			restart;
		}
		Thing_SetTranslation(999, -1);
		Delay(1);
	}
}

// [Mess] Energy Balancer Functions
Function int WhichWeapon(void) // Which weapon is the player currently using.  From weapons_ammo array
{
For(int i = 0; i < MAX_WEAPONS_GLOBAL; i++)
	{
	If(CheckWeapon(weapons_ammo[i][0]))
		{
		If(weapons_ammo[i][3] == "YES"){Return i;}
		}
	}
Return -1;
}

Function int EnergyBalancer(void) // Finds out which weapon has the lowest ammo ratio wise from the players inventory
{
int CurrentRatio;
int MinRatio = 255.0;
int LowestWeapon = -1;

For(int w = 0; w < MAX_WEAPONS_GLOBAL; w++)
	{
	If(CheckInventory(weapons_ammo[w][0]))
		{
		CurrentRatio = FixedDiv(CheckInventory(weapons_ammo[w][1]), GetAmmoCapacity(weapons_ammo[w][1]));
		If(CurrentRatio < MinRatio && weapons_ammo[w][3] == "YES")
			{
			MinRatio = CurrentRatio;
			LowestWeapon = w;
			}
		}
	}
return LowestWeapon;
}

function int BotWeaponSelect (void)
{
int SelectedWeapon;
int WeaponName;
int i = 0;

While(i <= 15)
	{
	SelectedWeapon = Random(0, MAX_WEAPONS_GLOBAL + MAX_BUSTERS-1);
	If(SelectedWeapon >= MAX_WEAPONS_GLOBAL)
		{
		WeaponName = BusterUpgrades[SelectedWeapon-MAX_WEAPONS_GLOBAL];
		}
	Else
		{
		WeaponName = weapons_ammo[SelectedWeapon][0];
		If(WeaponName == "TrebleBoost"){WeaponName = "TrebleBoostUpgrade";}
		}
	i++;
	If(CheckInventory(WeaponName)){Return(SelectedWeapon);}
	}
Return(-1);
}



// Rotation scripts
// Legacy, previously used for Power Stone and Top Spin.
script 990 (int whichrotate)
{
	// Top Spin
	if(whichrotate==1){
	SetActorAngle (ActivatorTID(), GetActorAngle (ActivatorTID()) - 0.06);
	}
	// Power Stone
	if(whichrotate==2){
	SetActorAngle (ActivatorTID(), GetActorAngle (ActivatorTID()) - 0.05);
	}
}

// Health checker for hit-based shields.
// hits - the number of hits the shield can tank for the player
// customProtect (true or false) - whether the shield uses the generic protection or its own
script 982 (int hits, int customProtect)
{
	if(hits == 0)
	{
		hits = 1;
	}
	else if(hits > 999)
	{
		Log(s:"\cgSCRIPT 982: SPECIFIED HITS VALUE TOO HIGH. TERMINATING.");
		terminate;
	}
	
	int health = GetActorProperty(0, APROP_HEALTH);
	int healCurrent = health;
	TakeInventory("ShieldHits", 999);
	GiveInventory("ShieldHits", hits);
	
	SetPlayerProperty(0, 1, PROP_BUDDHA);
	
	if(health < 2)
	{
		healCurrent = 2;
		SetActorProperty(0, APROP_HEALTH, 2);
	}
	
	while(CheckInventory("ShieldHits")>0 && CheckInventory("StopHitShield")==0)
	{
		Delay(1);
		if(GetActorProperty(0, APROP_HEALTH) > health)
		{
			health = GetActorProperty(0, APROP_HEALTH);
			healCurrent = GetActorProperty(0, APROP_HEALTH);
		}
		
		if(healCurrent > GetActorProperty(0, APROP_HEALTH))
		{
			TakeInventory("ShieldHits", 1);
			
			if(CheckInventory("LaserTridentProtect")==0)
			{
				if(CheckInventory("ShieldHits")>0)
				{
					SetActorProperty(0, APROP_HEALTH, healCurrent);
				}
				else
				{
					SetActorProperty(0, APROP_HEALTH, health);
				}
			}
			else
			{
				health = GetActorProperty(0, APROP_HEALTH);
				healCurrent = health;
				if(health < 2)
				{
					healCurrent = 2;
					SetActorProperty(0, APROP_HEALTH, 2);
				}
			}
			
			if(!customProtect)
			{
				GiveInventory("HitShieldProtection", 1);
			}
		}
	}
	
	if(CheckInventory("ShieldCheck")==0 && CheckInventory("BasicArmor")==0 && !customProtect)
	{
		GiveInventory("HitShieldProtection", 1);
	}
	
	SetPlayerProperty(0, 0, PROP_BUDDHA);
}


// Time Stopper HUD FX
//
script 986 (void)
{
SetHudSize(256,224,0);
SetFont("FLASHS1");
HudMessageBold(s:"A"; HUDMSG_PLAIN,50,CR_UNTRANSLATED,128.0,112.0,0.0);
Delay(4);
SetFont("FLASHS2");
HudMessageBold(s:"A"; HUDMSG_PLAIN,50,CR_UNTRANSLATED,128.0,112.0,0.0);
Delay(4);
SetFont("FLASHS3");
HudMessageBold(s:"A"; HUDMSG_PLAIN,50,CR_UNTRANSLATED,128.0,112.0,0.0);
Delay(4);
SetFont("FLASHS4");
HudMessageBold(s:"A"; HUDMSG_PLAIN,50,CR_UNTRANSLATED,128.0,112.0,0.0);
Delay(4);
SetFont("FLASHS5");
HudMessageBold(s:"A"; HUDMSG_PLAIN,50,CR_UNTRANSLATED,128.0,112.0,0.0);
Delay(4);
SetFont("FLASHS6");
HudMessageBold(s:"A"; HUDMSG_PLAIN,50,CR_UNTRANSLATED,128.0,112.0,0.0);
Delay(4);
SetFont("FLASHS7");
HudMessageBold(s:"A"; HUDMSG_PLAIN,50,CR_UNTRANSLATED,128.0,112.0,0.0);
Delay(4);
SetFont("FLASHS8");
HudMessageBold(s:"A"; HUDMSG_PLAIN,50,CR_UNTRANSLATED,128.0,112.0,0.0);
Delay(4);
SetFont("FLASHS9");
HudMessageBold(s:"A"; HUDMSG_PLAIN,50,CR_UNTRANSLATED,128.0,112.0,0.0);
Delay(4);
Restart;
}

// [Mike] Remove Time Stop on Death (user only)
// (could probably merge a few scripts with this)
script 987 DEATH
{
	// Check if the guy who died stopped time
	if(timestop==PlayerNumber()){
	ACS_Terminate(986,0); // Stop the flashy effects on the HUD for all players
	HudMessageBold(s:""; HUDMSG_PLAIN,50,CR_UNTRANSLATED,0.0,0.0,0.1);
	SetWeapon("MegaBuster");
	Delay(1);
	SetPlayerProperty(1,0,4);
	TakeInventory("PowerTimeFreezer",1);
	TakeInventory("TimeFreezer",1);
	TakeInventory("TimeStopperWep",1);
	timestop=-1;
	ACS_Terminate(193,0); //
	}
	
	// Stop the HUD effects
	HudMessageBold(s:""; HUDMSG_PLAIN,50,CR_UNTRANSLATED,0.0,0.0,0.1);
	//ACS_Terminate(986,0);
}

// LMS Weapon Randomization
//
script 981 (void)
{
// Check if the game is actually LMS
}

// A script to generate random numbers for LMS weapons
//
script 980 OPEN
{

}

// Script that is executed everytime a weapon's NoAmmo state is called.
script 979 (void)
{
If(PlayerIsBot(PlayerNumber()))
	{
	if(CheckInventory("TimeStopperWep")>0)
		{
		TakeInventory("TimeStopperWep",1);
		GiveInventory("MegaBuster",1);
		SetWeapon("MegaBuster");
		}
	if(CheckInventory("SkullBarrierWep")>0)
		{
		TakeInventory("SkullBarrierWep",1);
		GiveInventory("MegaBuster",1);
		SetWeapon("MegaBuster");
		}
	SetPlayerProperty(0,1,4);
	ACS_Execute(992, 0, 255);
	Delay(15);
	SetPlayerProperty(0,0,4);
	}
}



// Check Flame Blast for oil in Flame Man's stage
// (Legacy, needs to be removed eventually)
script 202 (void) 
{
if(CheckActorFloorTexture(0, "FLAMOIL1")){
ACS_Execute(1,0,0);
}
if(CheckActorFloorTexture(0, "FLAMOIL2")){
ACS_Execute(2,0,0);
}
}

// Scorch Wheel and instagib speed adjuster
//
script 191 (int speed)
{

switch(speed)
{
case 0:
SetActorProperty(0,APROP_SPEED,1.0);
SetActorProperty(0,APROP_JUMPZ,10.0);
break;
case 1:
SetActorProperty(0,APROP_SPEED,1.45);
break;
case 3:
SetActorProperty(0,APROP_SPEED,1.25);
SetActorProperty(0,APROP_JUMPZ,13.0);
break;
}

}

// [Mike]
// NOTE it's in WCOLORS because it uses the Energy Balancer weapon script. Feel 
// free to change the script number later (called only by the actor ReggaeEffect)

Script 260 (int AssignTID)
{
If(AssignTID == 1)
	{
	//ServerMAX = GetCVAR("sv_MaxClients");
	int Retry=0;
	For(int a=0; a <= ServerMAX; a++)
		{
		If(PlayerInGame(a))
			{
			If(CheckActorInventory(a+1000, "ReggaeFlag"))
				{
				TakeActorInventory(a+1000, "ReggaeFlag", 1);
				Thing_ChangeTID(0, a+2064);
				terminate;
				}
			If(a==ServerMAX && Retry < 2)
				{
				a=0;
				Delay(1);
				Retry++;
				}
			}
		}
	Thing_Remove(0);
	}
str StolenWeapon;
str StolenName;
int WeaponSlot;

bool Stolen = false;
int ReggaeTID = ActivatorTID();
If(ReggaeTID == 0){terminate;}
SetActivatorToTarget(0);
int VictimTID = ActivatorTID();
If(VictimTID >=1000){GiveActorInventory(VictimTID, "ReggaeBanish", 1);}

WeaponSlot = WhichWeapon();
Delay(1);
If(WeaponSlot >= 0)
	{
	StolenWeapon = weapons_ammo[WeaponSlot][0];
	StolenName = weapons_ammo[WeaponSlot][2];
	If(Weapons_Ammo[WeaponSlot][5] == "YES")
		{
		TakeInventory(StolenWeapon,1);
		GiveInventory("ResetPlayerStats", 1);
		Delay(1);
		GiveActorInventory(ReggaeTID - 1064,StolenWeapon,1);
		Stolen = TRUE;
		}
	}

	LocalAmbientSound("item/reggae",127);
	
	SetActivator(ReggaeTID - 1064);
	SetHudSize(600,380,0);
	if(Stolen == TRUE){HudMessage(s:"You stole \cc", s:StolenName, s:"\c- from ", n:VictimTID - 999, s:"!";HUDMSG_FADEOUT,2,CR_ORANGE,300.4,50.0,2.0,0.5); terminate;}
	HudMessage(s:"Couldn't steal a weapon from ", n:VictimTID - 999, s:"!";HUDMSG_FADEOUT,2,CR_ORANGE,300.4,50.0,2.0,0.5);
}

//Prevents bots from standing still and allows them to change weapons / use buster upgrades
//If Bots have the NoBotFix item, this script is terminated

Script 252 ENTER
{
int xPos;
int yPos;
int d = 10;
int BotWeapon;
int MaxPlayers = GetMaxPlayers();
if(PlayerIsBot(PlayerNumber()))
	{
	Delay(35);
	if(CheckInventory("NoBotFix")==1){terminate;}
	While(GetActorProperty(ActivatorTID(), APROP_HEALTH) > 0 && !CheckInventory("IsDead")==1)
		{
		xPos = GetActorX(0);
		yPos = GetActorY(0);
		Delay(35);
		BotWeapon = BotWeaponSelect();
		If(d <= 0 && BotWeapon >= 0)
			{
			If(BotWeapon >= MAX_WEAPONS_GLOBAL)
				{
				UseInventory(BusterUpgrades[BotWeapon-MAX_WEAPONS_GLOBAL]);
				d=Random(15, 25);
				}
			Else
				{
				If(weapons_ammo[BotWeapon][0] == "TrebleBoost")
					{
					UseInventory("TrebleBoostUpgrade");
					d=Random(15, 25);
					}
				Else
					{
					SetWeapon(weapons_ammo[BotWeapon][0]);
					//printbold(s:weapons_ammo[BotWeapon][0]);
					d=Random(5, 15);
					}
				}
			}
		Else
			{
			If(d > 0){d--;}
			}
		if(ACS_ExecuteWithResult(972)==2 || GetActorProperty(ActivatorTID(), APROP_HEALTH) <= 0 || CheckInventory("IsDead")==1){terminate;}

		}
	}
}

// [Lego] To keep Plug Ball from travelling across sky planes
//
script 206 (void)
{
	int checkDistance = false;
	while(CheckInventory("Once")>0 && ThingCountName("PlugBall", T_NONE)>0)
	{
		if(CheckActorFloorTexture(0, "F_SKY1"))
		{
			if(GetActorVelZ(0) < 0)
			{
				checkDistance = true;
			}
			
			if((GetActorZ(0) - GetActorFloorZ(0)) < 10.0 && checkDistance)
			{
				SetActorState(0, "Death");
			}
		}
		else
		{
			checkDistance = false;
		}
		Delay(1);
	}
}


// [Mike] Needlessly complex failsafe for the Time Stopper
//
Script 193 (void)
{
timestop=PlayerNumber();
//PrintBold(s:"Timestop failsafe started");
Delay(35*30);
//PrintBold(s:"Timestop failsafe Ended");
ACS_Terminate(986,0);
HudMessageBold(s:""; HUDMSG_PLAIN,50,CR_UNTRANSLATED,0.0,0.0,0.1);
Delay(1);
SetPlayerProperty(1,0,4);
TakeInventory("PowerTimeFreezer",1);
TakeInventory("TimeFreezer",1);
TakeInventory("TimeStopperWep",1);
timestop=-1;
//PrintBold(s:"Timestop failsafe Success!");
}

// [Mike] Failsafe continued
//
Script 192 (int who) DISCONNECT
{
// [Lego] Unrelated to the timestop failsafe.
// This is called to cause boss music to play properly.
ACS_ExecuteAlways(203, 0);

//PrintBold(s:"Disconnected");
if(timestop==who){
//PrintBold(s:"Found time stopper man");
ACS_Terminate(986,0);
HudMessageBold(s:""; HUDMSG_PLAIN,50,CR_UNTRANSLATED,0.0,0.0,0.1);
SetWeapon("MegaBuster");
Delay(1);
SetPlayerProperty(1,0,4);
//PrintBold(s:"unfroze people");
TakeInventory("PowerTimeFreezer",1);
TakeInventory("TimeFreezer",1);
TakeInventory("TimeStopperWep",1);
timestop=0;
ACS_Terminate(193,0);
}
}

// [Mess] Script to prevent certain weapons from causing problems in Possession
Script 188 ENTER 
{
Delay(10);
If(ACS_ExecuteWithResult(975)!=1){terminate;}
If(GetActorProperty(0, APROP_HEALTH) <= 0){terminate;}
If(CheckInventory("PowerPossessionArtifact")==1)
	{
	Delay(1);
	GiveInventory("ResetPlayerStats", 1);
	terminate;
	}
restart;
}
